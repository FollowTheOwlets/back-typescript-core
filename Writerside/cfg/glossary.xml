<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE terms SYSTEM "https://resources.jetbrains.com/writerside/1.0/glossary.dtd">
<terms>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="writable">Можно ли изменять значение</term>
    <term name="enumerable">Участвует ли в перечислении</term>
    <term name="configurable">Можно ли удалить/перенастроить</term>
    <term name="прототип">Объект-шаблон, от которого наследуются свойства</term>
    <term name="nullish coalescing">Оператор объединения с null</term>
    <term name="hoisting">Логическое перемещение объявлений вверх области</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Массив">Упорядоченная коллекция значений с индексацией с нуля и свойством length</term>
    <term name="Строка">Немутируемая последовательность символов в кодировке UTF-16</term>
    <term name="Мутабельность">Свойство методов изменять исходные данные по месту</term>
    <term name="Немутируемость">Свойство методов возвращать новый результат, не меняя исходные данные</term>
    <term name="UTF-16">Кодировка, в которой JavaScript хранит строки</term>
    <term name="Индекс">Позиция элемента в массиве или символа в строке, начиная с нуля</term>
    <term name="Лексикографическая сортировка">Порядок сравнения значений как строк по символам</term>
    <term name="Сравнивающая функция">Функция compareFn(a, b) для sort, возвращающая отрицательное/нулевое/положительное
        число
    </term>
    <term name="Поверхностная копия">Копия структуры, где ссылки на вложенные объекты сохраняются общими</term>
    <term name="Предикат">Функция, возвращающая true/false для проверки условия</term>
    <term name="Аккумулятор">Промежуточный накопленный результат в методах reduce/reduceRight</term>
    <term name="Побочный эффект">Внешнее воздействие функции (логирование, изменение внешних переменных, I/O)</term>
    <term name="Подстрока">Непрерывный фрагмент исходной строки</term>
    <term name="Разделитель">Символ(ы), по которому выполняется split/join</term>
    <term name="Пустой элемент массива">Элемент-«дырка», появляющийся после delete, при котором length не уменьшается
    </term>
    <term name="Регулярное выражение">Шаблон для поиска и замены в строках, поддерживаемый методом replace и split
    </term>
    <term name="Суррогатная пара">Пара 16-битных кодовых единиц UTF-16, представляющая один символ вне базовой
        плоскости
    </term>
    <term name="Блочная область видимости">Область видимости, ограниченная ближайшими фигурными скобками; переменные не
        выходят за пределы блока.
    </term>
    <term name="TDZ">Временная мёртвая зона: интервал с начала области до фактического объявления переменной let/const,
        где к ней нельзя обращаться.
    </term>
    <term name="Стрелочная функция">Короткий синтаксис объявления функции с лексическим this и без собственного
        arguments/prototype.
    </term>
    <term name="Шаблонная строка">Строковый литерал в обратных кавычках с интерполяцией ${...} и поддержкой
        многострочности.
    </term>
    <term name="Tag-функция шаблона">Функция, обрабатывающая шаблонную строку и вставки до формирования итоговой
        строки.
    </term>
    <term name="Параметры по умолчанию">Значения для параметров функции, используемые при передаче undefined.</term>
    <term name="Rest-параметры">Сбор оставшихся аргументов функции в массив через ... в списке параметров.</term>
    <term name="Spread-оператор">Разворачивание массивов в список аргументов или элементов другого массива.</term>
    <term name="Сокращённая запись свойств">Опущение имени свойства при совпадении с именем переменной в объектном
        литерале.
    </term>
    <term name="Вычисляемое имя свойства">Определение имени свойства объекта через выражение в квадратных скобках.
    </term>
    <term name="Класс">Синтаксическая обёртка над прототипами с поддержкой constructor, методов, static и
        наследования.
    </term>
    <term name="Модуль ES">Единица кода с синтаксисом import/export, исполняемая в строгом режиме.</term>
    <term name="Итератор">Объект с методом next(), возвращающим пары { value, done } для последовательного чтения
        значений.
    </term>
    <term name="Генератор">Функция с *, возвращающая итератор и позволяющая приостанавливать выполнение через yield.
    </term>
    <term name="Промис">Объект, представляющий асинхронный результат с состояниями pending/fulfilled/rejected и методами
        then/catch.
    </term>
    <term name="Symbol">Уникальный примитив, часто применяемый как ключ свойства без риска коллизий имён.</term>
    <term name="Map">Коллекция пар ключ→значение с произвольными ключами и сохранением порядка вставки.</term>
    <term name="Set">Коллекция уникальных значений с сохранением порядка вставки.</term>
    <term name="WeakMap">Коллекция пар объект-ключ→значение со слабыми ссылками на ключи и без итерации.</term>
    <term name="WeakSet">Коллекция уникальных объектных значений со слабыми ссылками и без итерации.</term>
    <term name="Строгий режим">Режим выполнения JavaScript с ужесточёнными правилами, предотвращающий ряд ошибок.</term>
    <term name="Хвостовой вызов">Вызов функции в хвостовой позиции, теоретически оптимизируемый без роста стека.</term>
    <term name="ES6">Версия стандарта ECMAScript 2015, значительно расширившая возможности JavaScript</term>
    <term name="Backend">Часть приложения, выполняющая обработку данных на стороне сервера</term>
    <term name="JavaScript">Язык программирования, используемый для создания веб-приложений</term>
    <term name="Стрелочная функция">Форма записи функции, которая наследует контекст this из окружения</term>
    <term name="Шаблонные строки">Строки в обратных кавычках с поддержкой подстановки выражений</term>
    <term name="Деструктуризация">Синтаксис извлечения значений из объектов и массивов</term>
    <term name="DTO">Data Transfer Object — объект для передачи данных между слоями приложения</term>
    <term name="Классы">Синтаксическая надстройка над прототипным наследованием, введённая в ES6</term>
    <term name="Модуль">Изолированный фрагмент кода, который можно импортировать и экспортировать</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>

    <term name="JavaScript">Язык программирования, на котором пишутся скрипты для выполнения в Node.js</term>
    <term name="Node.js">Среда выполнения JavaScript вне браузера</term>
    <term name="CLI">Интерфейс командной строки для запуска программ и утилит</term>
    <term name="REPL">Интерактивная оболочка чтения, оценки и печати выражений JavaScript</term>
    <term name="LTS">Долгосрочная поддержка версии платформы, рекомендуемая для продакшена</term>
    <term name="nvm">Менеджер версий Node.js для установки и переключения между версиями</term>
    <term name="npm">Стандартный менеджер пакетов для экосистемы Node.js</term>
    <term name="npx">Запуск бинарей из npm-пакетов без установки их глобально</term>
    <term name="package.json">Файл конфигурации проекта с метаданными, зависимостями и скриптами</term>
    <term name="CommonJS">Система модулей Node.js с require/module.exports</term>
    <term name="ES Module">Современная система модулей JavaScript с import/export</term>
    <term name="shebang">Строка в начале файла, задающая интерпретатор исполняемого скрипта</term>
    <term name="Рабочая директория">Текущая директория, из которой запускается процесс</term>
    <term name="Переменная окружения">Пара ключ-значение, передающая конфигурацию процессу</term>
    <term name="stdout">Стандартный поток вывода процесса</term>
    <term name="stderr">Стандартный поток ошибок процесса</term>
    <term name="Код возврата">Числовой результат завершения процесса: 0 — успех, иначе — ошибка</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>

    <term name="JavaScript">Динамический язык, реализующий стандарт ECMAScript, применимый на сервере и в инструментах
    </term>
    <term name="ECMAScript">Стандарт, описывающий синтаксис и поведение JavaScript</term>
    <term name="Node.js">Среда выполнения JavaScript вне браузера, основанная на движке V8</term>
    <term name="V8">Высокопроизводительный движок JavaScript от Google, используемый в Node.js</term>
    <term name="Событийный цикл">Механизм постановки и выполнения задач, обеспечивающий асинхронность в однопоточном
        JS
    </term>
    <term name="Асинхронность">Подход, при котором длительные операции не блокируют выполнение остального кода</term>
    <term name="Однопоточность">Модель исполнения, в которой пользовательский JS-код выполняется в одном потоке</term>
    <term name="TypeScript">Надстройка над JavaScript с системой типов, компилируемая в JS</term>
    <term name="nvm">Менеджер версий Node.js для установки и переключения версий</term>
    <term name="Асинхронность">Возможность выполнения операций параллельно, без остановки основного потока программы
    </term>
    <term name="Неблокирующий вызов">Функция, которая запускается в фоне и не останавливает выполнение кода</term>
    <term name="Промис">Объект, представляющий результат асинхронной операции</term>
    <term name="Callback Hell">Ситуация, когда код из-за множества вложенных функций становится трудно читаемым и
        поддерживаемым
    </term>
    <term name="JavaScript">Язык программирования, в котором асинхронность реализована через промисы и коллбеки</term>
    <term name="Асинхронность">Возможность выполнения операций параллельно, без остановки основного потока программы
    </term>
    <term name="Неблокирующий вызов">Функция, которая запускается в фоне и не останавливает выполнение кода</term>
    <term name="Промис">Объект, представляющий результат асинхронной операции</term>
    <term name="Callback Hell">Ситуация, когда код из-за множества вложенных функций становится трудно читаемым и
        поддерживаемым
    </term>
    <term name="JavaScript">Язык программирования, в котором асинхронность реализована через промисы и коллбеки</term>
    <term name="async/await">Синтаксический сахар над промисами, позволяющий писать асинхронный код в синхронном стиле
    </term>
    <term name="Fetch API">Встроенный интерфейс для выполнения HTTP-запросов и получения ответов</term>
    <term name="V8">Движок выполнения JavaScript/WebAssembly с JIT-компиляцией, используемый в Chrome и Node.js</term>
    <term name="Node.js">Среда выполнения JavaScript вне браузера, объединяющая V8 и libuv</term>
    <term name="libuv">Библиотека C для событийного цикла и неблокирующего I/O в Node.js</term>
    <term name="Isolate">Изолированная среда выполнения V8 с собственной кучей</term>
    <term name="Context">Глобальная среда (объект global/this, встроенные объекты) внутри изолята</term>
    <term name="Snapshot">Сериализованное начальное состояние V8 для быстрого старта</term>
    <term name="AST">Абстрактное синтаксическое дерево — структура кода после парсинга</term>
    <term name="Ignition">Интерпретатор V8, исполняющий байткод</term>
    <term name="Sparkplug">Baseline JIT-компилятор V8 для быстрого перевода байткода в машинный код</term>
    <term name="Maglev">Среднетировый оптимизирующий JIT в V8</term>
    <term name="TurboFan">Главный оптимизирующий компилятор V8 на SSA-представлении</term>
    <term name="Inline Caches">Кэшированные пути доступа к свойствам/вызовам методов для ускорения</term>
    <term name="Hidden Class">Скрытый класс (Map) — форма объекта со схемой свойств</term>
    <term name="Elements Kind">Вид элементов массива (packed, holey, smi, double, dictionary)</term>
    <term name="Type Feedback">Типовая обратная связь, собираемая в рантайме для JIT</term>
    <term name="Feedback Vector">Структуры данных V8 для хранения обратной связи по операциям</term>
    <term name="Deoptimization">Откат оптимизированного кода при нарушении предположений</term>
    <term name="OSR">On-Stack Replacement — замена интерпретируемого кадра на оптимизированный «на лету»</term>
    <term name="Event Loop">Событийный цикл — механизм поэтапного исполнения задач и I/O</term>
    <term name="Microtask Queue">Очередь микрозадач (Promises, queueMicrotask)</term>
    <term name="Worker Threads">Модель параллельных JS-воркеров для CPU-bound задач</term>
    <term name="Minor GC">Минорный сборщик мусора (молодое поколение, копирующий)</term>
    <term name="Major GC">Мажорный сборщик мусора (старое поколение, mark-sweep/compact)</term>
    <term name="Generational Hypothesis">Гипотеза поколений: большинство объектов живут недолго</term>
    <term name="Write Barrier">Барьер записи — механизм отслеживания ссылок между поколениями</term>
    <term name="Heap Snapshot">Снимок кучи для анализа удерживаемых объектов и утечек</term>
    <term name="WebAssembly">Бинарный формат для высокопроизводительного кода в V8</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Многопоточность">Возможность параллельного выполнения кода в нескольких потоках одного процесса</term>
    <term name="Worker">Поток исполнения JavaScript с собственным Event Loop и изолятом V8</term>
    <term name="worker_threads">Модуль Node.js для работы с потоками JavaScript</term>
    <term name="Event Loop">Механизм обработки очередей событий и коллбеков в среде выполнения</term>
    <term name="libuv">Библиотека абстракции ввода/вывода и пула потоков в Node.js</term>
    <term name="Пул потоков">Набор заранее созданных потоков для выполнения задач без накладных расходов на создание
    </term>
    <term name="isMainThread">Флаг среды выполнения: находимся ли мы в главном потоке</term>
    <term name="parentPort">Канал связи воркера с родительским потоком</term>
    <term name="workerData">Набор данных, переданных воркеру при создании</term>
    <term name="MessageChannel">Пара связанных двунаправленных портов для обмена сообщениями</term>
    <term name="MessagePort">Один из портов MessageChannel для передачи данных</term>
    <term name="TransferList">Список объектов (обычно ArrayBuffer), передаваемых без копирования</term>
    <term name="Transferable">Класс объектов, чьё «владение» можно передать другому контексту</term>
    <term name="Structured Clone">Алгоритм копирования сложных структур данных между потоками/воркерами</term>
    <term name="SharedArrayBuffer">Буфер памяти, совместно используемый несколькими потоками</term>
    <term name="Atomics">Набор атомарных операций синхронизации для TypedArray</term>
    <term name="ArrayBuffer">Низкоуровневый буфер бинарных данных фиксированной длины</term>
    <term name="CPU-bound">Задачи, ограниченные вычислительной мощностью CPU</term>
    <term name="I/O-bound">Задачи, ограниченные скоростью ввода/вывода</term>
    <term name="child_process">Модуль Node.js для запуска процессов-потомков</term>
    <term name="cluster">Модуль Node.js для форка нескольких процессов, разделяющих один порт</term>
    <term name="ResourceLimits">Параметры ограничения ресурсов воркера (heap, stack и т.д.)</term>
    <term name="Isolate V8">Изолированный контекст исполнения JavaScript в движке V8</term>
    <term name="Класс">Шаблон (тип) для создания объектов с общими свойствами и методами</term>
    <term name="Объект">Конкретный экземпляр класса или простого литерала с состоянием и поведением</term>
    <term name="Экземпляр">Конкретный созданный объект класса, полученный через оператор new
    </term>
    <term name="Конструктор">Специальный метод constructor для инициализации состояния объекта
    </term>
    <term name="Метод">Функция, связанная с объектом или его прототипом</term>
    <term name="Статический метод">Метод, принадлежащий классу как функции-конструктору, а не экземплярам</term>
    <term name="Публичное поле">Свойство экземпляра, доступное извне</term>
    <term name="Приватное поле">Свойство, объявленное с префиксом #, недоступное вне класса
    </term>
    <term name="Геттер">Метод-доступор, возвращающий значение свойства при чтении</term>
    <term name="Сеттер">Метод-доступор, вызываемый при присваивании свойства</term>
    <term name="Наследование">Отношение между классами, где подкласс расширяет поведение и состояние суперкласса</term>
    <term name="Суперкласс">Базовый класс, от которого наследуются</term>
    <term name="Подкласс">Производный класс, расширяющий суперкласс</term>
    <term name="Полиморфизм">Способность объектов разных классов отвечать на один и тот же интерфейс по-разному</term>
    <term name="Инкапсуляция">Сокрытие внутренних деталей реализации за публичным интерфейсом</term>
    <term name="Абстракция">Выделение существенных характеристик и игнорирование несущестенных деталей</term>
    <term name="Прототип">Объект-шаблон, от которого наследуются свойства и методы других объектов</term>
    <term name="Прототипное наследование">Механизм JS, при котором объекты наследуют друг у друга через цепочку
        прототипов
    </term>
    <term name="Композиция">Построение объектов путём включения других объектов и делегирования им задач</term>
    <term name="Миксин">Функция/шаблон, добавляющий поведение классам без иерархий наследования</term>
    <term name="this">Контекст вызова метода/функции, определяющий, к какому объекту относится обращение</term>
    <term name="super">Специальная ссылка на суперкласс для вызова его конструктора и методов</term>
    <term name="new.target">Специальное свойство, указывающее, какой конструктор был вызван через
        new
    </term>
    <term name="ООП">Парадигма программирования, основанная на объектах, их состояниях и взаимодействиях</term>
    <term name="LSP">Принцип подстановки Лисков: объекты подклассов должны заменять объекты суперкласса без нарушения
        корректности
    </term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>

    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Класс">Шаблон, описывающий состояние (поля) и поведение (методы) объектов</term>
    <term name="Объект">Экземпляр класса с собственным состоянием и поведением</term>
    <term name="Экземпляр">Конкретный созданный объект по шаблону класса</term>
    <term name="Метод">Функция, связанная с классом/объектом и изменяющая его состояние или возвращающая результат
    </term>
    <term name="Поле">Переменная внутри объекта или класса, хранящая часть его состояния</term>
    <term name="Конструктор">Специальный метод/процедура инициализации нового объекта</term>
    <term name="Инкапсуляция">Сокрытие внутреннего состояния и управление доступом к нему</term>
    <term name="Абстракция">Выделение существенного поведения при сокрытии деталей реализации</term>
    <term name="Наследование">Механизм получения новым классом свойств и методов базового класса</term>
    <term name="Полиморфизм">Способность вызывать единый интерфейс с разными реализациями</term>
    <term name="Интерфейс">Контракт, определяющий набор доступных методов без реализации</term>
    <term name="Абстрактный класс">Класс с неполной реализацией, не допускающий непосредственного создания экземпляра
    </term>
    <term name="Композиция">Связь «состоит из»: объект включает другие объекты как части</term>
    <term name="Агрегирование">Ослабленная композиция, части могут существовать независимо от целого</term>
    <term name="Сигнатура метода">Имя метода и список параметров (и их типы), определяющие его вызов</term>
    <term name="Динамическая диспетчеризация">Выбор реализации метода в рантайме на основе фактического типа объекта
    </term>
    <term name="Инвариант класса">Всегда верные утверждения о корректном состоянии объекта</term>
    <term name="Неизменяемость">Свойство объекта не менять своё состояние после создания</term>
    <term name="Перегрузка">Определение нескольких методов с одним именем, но разными сигнатурами</term>
    <term name="Переопределение">Замена реализации метода базового класса в производном классе</term>
    <term name="SOLID">Набор из пяти принципов проектирования объектного кода</term>
    <term name="Хрупкий базовый класс">Антипаттерн: изменения в базовом классе ломают поведение наследников</term>
    <term name="Аспект">Модуль, инкапсулирующий сквозную функциональность и правила её применения (советы и срезы).
    </term>
    <term name="Сквозная функциональность">Поведение, повторяющееся во многих местах системы (логирование, безопасность,
        метрики, транзакции).
    </term>
    <term name="Точка соединения (Join Point)">Конкретное место в выполнении программы, где может сработать аспект
        (вызов метода, обработка исключения и т.п.).
    </term>
    <term name="Срез (Pointcut)">Выражение/правило, выбирающее множество точек соединения для применения советов.</term>
    <term name="Совет (Advice)">Код аспекта, который выполняется до, после, вместо или вокруг целевого вызова.</term>
    <term name="Сплетение (Weaving)">Внедрение аспектов в код на этапах компиляции, загрузки или выполнения.</term>
    <term name="Прокси">Промежуточный объект, перехватывающий вызовы для добавления поведения (интерсепторы,
        динамические прокси).
    </term>
    <term name="Перехватчик">Компонент в цепочке, который получает вызов, может выполнить логику и передать управление
        дальше.
    </term>
    <term name="Контекст трассировки">Набор идентификаторов (TraceId/SpanId), передаваемый через вызовы для сквозной
        корреляции логов/метрик.
    </term>
    <term name="Идемпотентность">Свойство операции давать тот же эффект при повторном выполнении.</term>
    <term name="Порядок аспектов">Правило, задающее последовательность применения нескольких аспектов к одному вызову.
    </term>
    <term name="LTW">Load-Time Weaving — сплетение при загрузке классов.</term>
    <term name="RAII">Идиома C++, при которой ресурсы захватываются в конструкторе и освобождаются в деструкторе, удобно
        для around-логики.
    </term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно.</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов.</term>

    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Компонент">Автономная единица поставки и замены с явными контрактами и жизненным циклом</term>
    <term name="Контракт">Формальное описание предоставляемых и требуемых интерфейсов компонента, включая типы и
        инварианты
    </term>
    <term name="Порт">Точка подключения компонента к внешнему миру (предоставляемый или требуемый интерфейс)</term>
    <term name="Адаптер">Прослойка, которая согласует порт компонента с конкретной технологией или реализацией</term>
    <term name="Внедрение зависимостей">Механизм передачи компоненту его требуемых зависимостей извне (в
        конструктор/фабрику)
    </term>
    <term name="Жизненный цикл">Набор стадий существования компонента: инициализация, старт, работа, останов</term>
    <term name="SemVer">Семантическое версионирование: MAJOR.MINOR.PATCH с правилами совместимости API</term>
    <term name="ABI">Бинарный интерфейс приложения; важен для совместимости скомпилированных библиотек</term>
    <term name="Сервис-локатор">Антипаттерн получения зависимостей из глобального реестра, скрывающий связи</term>
    <term name="Граница компонента">Чёткая областная граница, через которую доступен только контракт, а детали скрыты
    </term>

    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Чистая функция">Функция без побочных эффектов, чей результат зависит только от входов</term>
    <term name="Имутабельность">Свойство данных не изменяться после создания; обновление через создание новой версии
    </term>
    <term name="Функция высшего порядка">Функция, принимающая или возвращающая другие функции</term>
    <term name="Композиция функций">Объединение нескольких функций так, что выход одной — вход другой</term>
    <term name="Референциальная прозрачность">Свойство выражения быть взаимозаменяемым со своим значением без изменения
        поведения программы
    </term>
    <term name="Конвейер преобразований">Последовательность шагов обработки данных (map → filter → reduce)</term>
    <term name="Каррирование">Представление функции с несколькими аргументами как цепочки функций по одному аргументу
    </term>
    <term name="Частичное применение">Фиксация части аргументов функции с получением новой функции</term>
    <term name="Рекурсия">Техника, при которой функция вызывает сама себя для решения подзадачи</term>
    <term name="Хвостовая рекурсия">Рекурсия, где рекурсивный вызов — последнее действие функции</term>
    <term name="Ленивые вычисления">Отложенное выполнение до момента фактической потребности в результате</term>
    <term name="Option/Maybe">Контейнер, выражающий «значение или его отсутствие» без исключений</term>
    <term name="Either/Result">Контейнер результата с явным успехом или ошибкой как значением</term>
    <term name="Монолитное приложение">Единый развёртываемый процесс/артефакт, содержащий все подсистемы</term>
    <term name="Модульный монолит">Монолит, организованный как набор изолированных модулей с публичными контрактами и
        скрытыми внутренностями
    </term>
    <term name="Модуль">Логически цельный блок функциональности, имеющий собственные инварианты и публичный фасад</term>
    <term name="Контракт">Официально задокументированный интерфейс или протокол взаимодействия между модулями</term>
    <term name="КОП (Компонентно-ориентированное программирование)">Подход, в котором система строится из независимых
        компонентов с чёткими интерфейсами и зонами ответственности
    </term>
    <term name="Компонент">Техническая реализация модуля/поддомена с границами и интерфейсом</term>
    <term name="Компонентная команда">Команда, владеющая компонентом: отвечает за код, инциденты, качество и эволюцию
    </term>
    <term name="Транзакция">Атомарная последовательность операций над данными (ACID), завершающаяся полностью или
        откатывающаяся
    </term>
    <term name="Согласованность">Свойство данных сохранять инварианты после любых допустимых операций</term>
    <term name="Ограниченный контекст (Bounded Context)">Часть доменной модели с собственным языком и инвариантами,
        отделённая от соседних контекстов
    </term>
    <term name="Big Ball of Mud">Антипаттерн: бесструктурная кодовая база без чётких границ и принципов</term>
    <term name="Инвариант">Правило, которое должно быть истинным для доменных данных всегда</term>
    <term name="Порт/Адаптеры">Шаблон, отделяющий домен от инфраструктуры через интерфейсы (порты) и их реализации
        (адаптеры)
    </term>
    <term name="Стратегия релиза">Способ выката версии (blue/green, canary, откат), контролирующий риск и доступность
    </term>
    <term name="Вертикальный срез">Организация кода по фичам: каждая функция содержит UI, приложение, домен и
        инфраструктуру
    </term>
    <term name="Архитектура">Структура и организация системы, определяющая взаимодействие её частей</term>
    <term name="Spaghetti code">Запутанный и плохо структурированный код, в котором сложно разобраться</term>
    <term name="Масштабируемость">Способность системы выдерживать рост нагрузки без критических изменений</term>

    <term name="Микросервис">Автономный процесс, реализующий узкую бизнес-возможность, владеющий собственными данными и
        имеющий явные контракты взаимодействия
    </term>
    <term name="Сервисная граница">Чётко определённая область ответственности и данных, внутри которой сервис
        гарантирует инварианты
    </term>
    <term name="Слабая связность">Минимальная зависимость между сервисами, позволяющая менять их независимо</term>
    <term name="Высокая связность">Сильная внутренняя связность кода и данных внутри одного сервиса вокруг одной
        задачи
    </term>
    <term name="Контракт API">Формальное описание интерфейса взаимодействия (методы, схемы, коды ответов), служащее
        основанием для интеграции
    </term>
    <term name="Обратная совместимость">Свойство нового контракта не ломать существующих потребителей</term>
    <term name="Версионирование API">Практика одновременной поддержки нескольких версий контракта (например, /v1 и
        /v2)
    </term>
    <term name="Идемпотентность">Свойство операции давать один и тот же эффект при повторном выполнении с теми же
        параметрами
    </term>
    <term name="Согласованность в итоге">Модель, при которой данные между сервисами приходят к一致ию через некоторое
        время
    </term>
    <term name="Глобальная транзакция">Транзакция, охватывающая несколько сервисов/хранилищ; нежелательна из-за
        хрупкости и задержек
    </term>
    <term name="Наблюдаемость">Способность системы предоставлять достаточную информацию (логи, метрики, трассировки) для
        понимания её состояния
    </term>
    <term name="Трассировка распределенная">Сбор и связывание спанов по всему пути запроса через несколько сервисов
    </term>
    <term name="Корреляционный идентификатор">Уникальный идентификатор, передаваемый сквозь все вызовы для связывания
        логов и трассировок
    </term>
    <term name="SLO">Целевая метрика надёжности/производительности (например, 99.5% запросов быстрее 300 мс)</term>
    <term name="SLA">Договорные обязательства перед потребителем на основе SLO (часто юридически значимы)</term>
    <term name="Zero Trust">Модель безопасности «не доверяй по умолчанию», требующая проверки и шифрования даже внутри
        периметра
    </term>
    <term name="mTLS">Взаимная TLS-аутентификация между сервисами на транспортном уровне</term>
    <term name="Модульный монолит">Монолитное приложение с жёсткими внутренними границами модулей, удобная стадия перед
        выделением микросервисов
    </term>
    <term name="Логирование">Запись структурированных событий выполнения системы для расследования инцидентов и аудита
    </term>
    <term name="Метрики">Агрегированные числовые показатели работы системы (латентность, ошибки, нагрузка), используемые
        для алертинга
    </term>
    <term name="Доменная модель">Структура понятий, правил и ограничений предметной области, выражённая в виде
        взаимосвязанных объектов и процессов
    </term>
    <term name="Предметная область">Часть реального мира, задачи и правила которой отражает система</term>
    <term name="Единый язык">Согласованные термины и определения, одинаково используемые разработчиками и экспертами
        домена
    </term>
    <term name="Контекст">Область, в которой термины имеют однозначный смысл</term>
    <term name="Карта контекстов">Описание отношений между контекстами: источники истины, переводы понятий, зоны
        ответственности
    </term>
    <term name="Сущность">Объект, чья идентичность важнее текущих свойств и сохраняется во времени</term>
    <term name="Значение">Неизменяемый объект без собственной идентичности, полностью определяемый своими полями</term>
    <term name="Агрегат">Кластер сущностей и значений с общими инвариантами и единой границей согласованности</term>
    <term name="Корень агрегата">Единственная точка внешнего доступа к агрегату, через которую разрешены изменения
    </term>
    <term name="Инвариант">Правило, которое всегда должно выполняться в пределах выбранной границы</term>
    <term name="Доменное событие">Факт, произошедший в терминах домена и имеющий бизнес-значение</term>
    <term name="Политика">Правило принятия решений в домене, независимое от технических деталей</term>
    <term name="DDD">Domain-Driven Design: подход, в котором дизайн кода ведётся доменными понятиями и правилами</term>
    <term name="TDD">Test-Driven Development: цикл разработки через тесты — «красный → зелёный → рефакторинг»</term>
    <term name="EDD">Event-Driven Design/Development: событийно-ориентированное проектирование и развитие модели</term>
    <term name="Команда">Запрос на изменение состояния модели, инициирующий поведение агрегатов</term>
    <term name="Запрос">Операция чтения состояния модели без его изменения</term>
    <term name="CQRS">Идея разделения моделей и потоков чтения и записи для упрощения проектирования</term>
    <term name="Идемпотентность">Свойство операции давать одинаковый результат при повторном применении</term>
    <term name="Неизменяемость">Свойство объекта не изменяться после создания; изменения выражаются созданием нового
        значения
    </term>
    <term name="Согласованность со временем">Модель, в которой глобальные состояния приходят к верным значениями не
        мгновенно, а через согласования
    </term>
    <term name="Антикоррупционный слой">Способ защитить модель одного контекста от искажений терминов и правил из
        другого
    </term>
    <term name="Сервис">Автономный развертываемый компонент, владеющий своим состоянием и выполняющий ограниченный набор
        функций
    </term>
    <term name="Bounded_Context">Чёткая граница предметной области, внутри которой термины и модели имеют однозначные
        значения
    </term>
    <term name="Оркестрация">Централизованное управление долгоживущим процессом специальным координатором с хранением
        состояний и компенсаций
    </term>
    <term name="Хореография">Распределённая координация, когда участники реагируют на события без центрального
        управляющего узла
    </term>
    <term name="Сага">Паттерн распределённых транзакций: последовательность локальных действий с компенсирующими
        операциями при неуспехе
    </term>
    <term name="Outbox">Транзакционная запись события в локовое хранилище с последующей надёжной публикацией в брокер
    </term>
    <term name="CQRS">Разделение моделей и путей для команд (запись) и запросов (чтение) ради масштабирования и
        изоляции
    </term>
    <term name="Event_Sourcing">Подход, при котором система хранит не текущее состояние, а журнал доменных событий
    </term>
    <term name="Circuit_Breaker">Механизм, предотвращающий каскадные ошибки, размыкая вызовы к нестабильной
        зависимости
    </term>
    <term name="Bulkhead">Изоляция ресурсов между частями системы, чтобы сбой в одном сегменте не уронил остальные
    </term>
    <term name="Idempotency">Свойство операции давать тот же итог при повторном выполнении с теми же данными</term>
    <term name="DLQ">Очередь для сообщений, неоднократно не обработанных успешно потребителем</term>
    <term name="Команда">Сообщение, инициирующее действие; может выполняться асинхронно и не обязана возвращать
        результат
    </term>
    <term name="Событие">Сообщение-факт о случившемся изменении состояния в домене</term>
    <term name="Идемпотентный_ключ">Ключ, позволяющий определить повторную обработку и избежать дублирования эффектов
    </term>
    <term name="Согласованность_в_итоге">Свойство распределённых данных приходить к корректному состоянию через время
    </term>
    <term name="Материализованная_проекция">Предподсчитанное представление для быстрых запросов чтения</term>
    <term name="Таймаут_операции">Ограничение времени на выполнение запроса или шага процесса</term>
    <term name="Ретрай_с_джиттером">Повтор с увеличивающейся паузой и случайным разбросом для избежания «стампида»
    </term>
    <term name="Модель_данных">Структура сущностей и связей, которой владеет сервис и за целостность которой он
        отвечает
    </term>
    <term name="Сервис">Автономный развертываемый компонент, владеющий своим состоянием и выполняющий ограниченный набор
        функций
    </term>
    <term name="Bounded_Context">Чёткая граница предметной области, внутри которой термины и модели имеют однозначные
        значения
    </term>
    <term name="Оркестрация">Централизованное управление долгоживущим процессом специальным координатором с хранением
        состояний и компенсаций
    </term>
    <term name="Хореография">Распределённая координация, когда участники реагируют на события без центрального
        управляющего узла
    </term>
    <term name="Сага">Паттерн распределённых транзакций: последовательность локальных действий с компенсирующими
        операциями при неуспехе
    </term>
    <term name="Outbox">Транзакционная запись события в локовое хранилище с последующей надёжной публикацией в брокер
    </term>
    <term name="CQRS">Разделение моделей и путей для команд (запись) и запросов (чтение) ради масштабирования и
        изоляции
    </term>
    <term name="Event_Sourcing">Подход, при котором система хранит не текущее состояние, а журнал доменных событий
    </term>
    <term name="Circuit_Breaker">Механизм, предотвращающий каскадные ошибки, размыкая вызовы к нестабильной
        зависимости
    </term>
    <term name="Bulkhead">Изоляция ресурсов между частями системы, чтобы сбой в одном сегменте не уронил остальные
    </term>
    <term name="Idempotency">Свойство операции давать тот же итог при повторном выполнении с теми же данными</term>
    <term name="DLQ">Очередь для сообщений, неоднократно не обработанных успешно потребителем</term>
    <term name="Команда">Сообщение, инициирующее действие; может выполняться асинхронно и не обязана возвращать
        результат
    </term>
    <term name="Событие">Сообщение-факт о случившемся изменении состояния в домене</term>
    <term name="Идемпотентный_ключ">Ключ, позволяющий определить повторную обработку и избежать дублирования эффектов
    </term>
    <term name="Согласованность_в_итоге">Свойство распределённых данных приходить к корректному состоянию через время
    </term>
    <term name="Материализованная_проекция">Предподсчитанное представление для быстрых запросов чтения</term>
    <term name="Таймаут_операции">Ограничение времени на выполнение запроса или шага процесса</term>
    <term name="Ретрай_с_джиттером">Повтор с увеличивающейся паузой и случайным разбросом для избежания «стампида»
    </term>
    <term name="Модель_данных">Структура сущностей и связей, которой владеет сервис и за целостность которой он
        отвечает
    </term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="TypeScript">Надстройка над JavaScript, добавляющая статическую систему типов и проверку на этапе
        компиляции
    </term>
    <term name="Тип">Форма и ограничения значения, используемые компилятором для проверки корректности кода</term>
    <term name="Инференс типов">Автоматический вывод типа компилятором без явной аннотации</term>
    <term name="Структурная типизация">Совместимость по форме объекта (набор полей), а не по имени типа</term>
    <term name="Интерфейс">Описание контракта формы объекта в TS</term>
    <term name="Дженерик">Параметризованный тип/функция/класс, сохраняющий информацию о типах</term>
    <term name="Юнион-типы">Объединение нескольких вариантов типов через оператор «|»</term>
    <term name="Пересечение типов">Комбинация нескольких типов в один через «&amp;»</term>
    <term name="Сужение типов">Анализ ветвлений и проверок, позволяющий компилятору уточнять тип</term>
    <term name="Утилитные типы">Готовые обобщённые преобразователи типов (Partial, Pick, Omit и др.)</term>
    <term name="strictNullChecks">Режим, при котором null/undefined явно учитываются в типах</term>
    <term name="any">Специальный тип, отключающий проверки по месту использования</term>
    <term name="unknown">Безопасная альтернатива any: требует явного сужения перед использованием</term>
    <term name="never">Тип значений, которые никогда не возникают (например, функция всегда кидает исключение)</term>
    <term name="tsconfig.json">Конфигурационный файл TypeScript-компилятора</term>
    <term name="Декларации типов">Файлы \*.d.ts, описывающие типы для JS-пакетов</term>
    <term name="ESM/CJS">Два модулярных формата JS: ECMAScript Modules и CommonJS</term>

    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Node.js">Среда выполнения JavaScript вне браузера</term>
    <term name="TypeScript">Надстройка над JavaScript с типами и компиляцией в JS</term>
    <term name="Модуль">Файл или пакет с изолированным пространством и публичным API</term>
    <term name="ESM">Формат ES-модулей с синтаксисом import/export</term>
    <term name="CommonJS">Формат модулей Node.js с require/module.exports</term>
    <term name="Barrel (index.ts)">Файл-агрегатор, переэкспортирующий публичные сущности</term>
    <term name="npm">Менеджер пакетов экосистемы Node.js</term>
    <term name="dependency">Библиотека, требуемая в рантайме</term>
    <term name="devDependency">Зависимость, используемая только при разработке</term>
    <term name="peerDependency">Ожидаемая у потребителя совместимая зависимость</term>
    <term name="SemVer">Семантическое версионирование MAJOR.MINOR.PATCH</term>
    <term name="Tree-shaking">Удаление неиспользуемого кода бандлером</term>
    <term name="Exports map">Поле exports в package.json, описывающее точки входа под разные окружения</term>
    <term name="npm">Менеджер пакетов экосистемы Node.js для установки зависимостей и управления скриптами</term>
    <term name="package.json">Файл с метаданными проекта и списком зависимостей/скриптов</term>


    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Express">Минималистичный веб-фреймворк для Node.js для создания HTTP-серверов и API</term>
    <term name="Фреймворк">Набор библиотек и соглашений, ускоряющих разработку приложений</term>
    <term name="Node.js">Серверная платформа исполнения JavaScript вне браузера</term>
    <term name="HTTP">Протокол передачи гипертекста для общения клиента и сервера</term>
    <term name="Запрос">Сообщение клиента серверу с методом, путём, заголовками и телом</term>
    <term name="Маршрут">Связка HTTP-метода и пути с обработчиком запроса</term>
    <term name="Маршрутизатор">Модуль Express (Router) для группировки и подключения маршрутов</term>
    <term name="Контроллер">Слой, преобразующий HTTP-запросы в вызовы доменной логики и формирующий ответы</term>
    <term name="Сервис">Слой бизнес-логики, не зависящий от HTTP-деталей</term>
    <term name="Репозиторий">Слой доступа к данным (БД/внешние сервисы), инкапсулирующий детали хранения</term>
    <term name="Middleware">Функция пред-/пост-обработки запроса в цепочке Express</term>
    <term name="Middleware-цепочка">Последовательность middleware, через которую проходит каждый запрос</term>
    <term name="Обработчик ошибок">Специальное middleware Express с сигнатурой (err, req, res, next)</term>
    <term name="CORS">Механизм контроля кросс-доменных запросов между браузером и сервером</term>
    <term name="REST">Архитектурный стиль работы веб-API с использованием ресурсов и HTTP-методов</term>
    <term name="CRUD">Базовые операции над ресурсом: Create, Read, Update, Delete</term>
    <term name="HTTP статус-код">Числовой код результата обработки запроса (2xx, 4xx, 5xx)</term>
    <term name="Статические файлы">Ресурсы (изображения, CSS, JS), отдаваемые сервером «как есть»</term>
    <term name="Шаблонизатор">Инструмент серверного рендеринга HTML на основе шаблонов</term>
    <term name="Переменные окружения">Конфигурационные значения, задаваемые вне кода (например, через .env)</term>
    <term name="Валидация">Проверка входных данных на соответствие правилам до бизнес-логики</term>

    <term name="HTTP">Протокол передачи гипертекста, определяющий формат запросов и ответов между клиентом и сервером
    </term>
    <term name="Сообщение запроса">Структура клиентского сообщения: строка запроса, заголовки и тело</term>
    <term name="Сообщение ответа">Структура серверного сообщения: строка статуса, заголовки и тело</term>
    <term name="Метод HTTP">Операция над ресурсом (GET, POST, PUT, PATCH, DELETE, ...)</term>
    <term name="Статус-код">Числовой результат обработки запроса (2xx, 3xx, 4xx, 5xx)</term>
    <term name="Заголовок">Пара ключ:значение, влияющая на обработку запроса/ответа</term>
    <term name="URI">Строка-идентификатор ресурса (путь, параметры, фрагмент)</term>
    <term name="URL">Указатель местоположения ресурса (схема, хост, порт, путь, параметры)</term>
    <term name="Идемпотентность">Свойство операции давать одинаковый результат при повторном выполнении</term>
    <term name="Cookie">Пара ключ=значение, сохраняемая браузером и отправляемая серверу с каждым запросом к домену
    </term>
    <term name="Сессия">Хранимое на сервере состояние пользователя, связанное с идентификатором в cookie</term>
    <term name="Bearer токен">Схема авторизации по токену в заголовке Authorization</term>
    <term name="Basic авторизация">Схема авторизации по base64(user:pass) в заголовке Authorization</term>
    <term name="HTTPS">HTTP поверх TLS, обеспечивающий шифрование и аутентификацию сервера</term>
    <term name="TLS">Криптографический протокол для защищённой передачи данных по сети</term>
    <term name="CORS">Механизм контроля кросс-доменных запросов из браузера</term>
    <term name="Реверс-прокси">Промежуточный сервер, принимающий клиентские запросы и перенаправляющий их на бэкенды
    </term>
    <term name="CDN">Сеть доставки контента, кэширующая данные ближе к пользователю</term>
    <term name="Контент-Негациация">Механизм согласования формата/языка/сжатия ответа между клиентом и сервером</term>
    <term name="ETag">Тег версии ресурса для условных запросов и кеширования</term>
    <term name="Rate limiting">Ограничение скорости/частоты запросов для защиты сервиса</term>
    <term name="Токен">Криптографическая строка, подтверждающая права клиента при обращении к API</term>
    <term name="Service Worker">Скрипт браузера для офлайн-режима, кеширования и перехвата сетевых запросов</term>
    <term name="HTTP/2">Версия протокола с мультиплексированием и бинарным форматом</term>
    <term name="HTTP/3">Версия протокола поверх QUIC/UDP с улучшенной задержкой и устойчивостью</term>
    <term name="Серверная разработка">Создание программ, работающих на стороне сервера: принимают запросы, применяют
        бизнес-правила и возвращают ответы
    </term>
    <term name="Запрос">Сообщение клиента серверу с методом, путём, заголовками и телом</term>
    <term name="Ответ">Сообщение сервера клиенту со статусом, заголовками и телом</term>
    <term name="Stateless">Подход, при котором сервер не хранит состояние между запросами</term>
    <term name="Stateful">Подход, при котором часть состояния пользователя/соединения хранится на сервере</term>
    <term name="Идемпотентность">Свойство операции давать одинаковый результат при повторе; важно для ретраев и
        дедупликации
    </term>
    <term name="RBAC">Ролевая модель авторизации: доступ определяется ролями</term>
    <term name="ABAC">Атрибутивная модель авторизации: доступ по правилам и атрибутам субъекта/объекта/контекста</term>
    <term name="Кэш">Быстрое хранилище для часто запрашиваемых данных с коротким временем доступа</term>
    <term name="Очередь сообщений">Инфраструктура для асинхронной доставки задач между компонентами системы</term>
    <term name="Трассировка">Отслеживание пути запроса через сервисы с измерением времени на каждом участке</term>
    <term name="SLO">Цель надёжности сервиса (например, доступность или p95 задержка)</term>
    <term name="Фичефлаг">Переключатель логики/функций без деплоя кода</term>
    <term name="Юзкейс">Описанный сценарий взаимодействия с системой, реализующий бизнес-ценность</term>
    <term name="Инвариант домена">Правило, которое должно оставаться истинным для данных независимо от операций</term>


    <term name="MVC">Архитектурный шаблон разделения на Модель, Представление и Контроллер</term>
    <term name="Модель">Доменные данные и правила их изменения; источник правды предметной области</term>
    <term name="Представление">Слой форматирования ответа (HTML/JSON/и т.п.), не содержит бизнес-логики</term>
    <term name="Контроллер">Координатор HTTP-запросов: принимает ввод, вызывает сервисы, выбирает представление</term>
    <term name="Маршрутизатор">Механизм сопоставления HTTP-метода и пути обработчику (контроллеру)</term>
    <term name="Middleware">Промежуточный обработчик запроса/ответа для сквозных задач</term>
    <term name="Слой сервиса">Компоненты, реализующие бизнес-сценарии поверх моделей/репозиториев</term>
    <term name="Репозиторий">Абстракция доступа к данным (БД/кэш/файлы), скрывающая детали хранения</term>
    <term name="DTO">Объект передачи данных, фиксирующий контракт входа/выхода и валидацию</term>
    <term name="Валидация">Проверка соответствия входных данных контракту и инвариантам</term>
    <term name="Шаблонизатор">Инструмент генерации HTML из данных (например, EJS, Pug)</term>
    <term name="REST">Стиль взаимодействия по HTTP, основанный на ресурсах и их представлениях</term>
    <term name="SRP">Принцип единственной ответственности: один модуль — одна причина для изменения</term>
    <term name="Express">Минималистичный Node.js фреймворк для создания веб-приложений</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>

    <term name="Аутентификация">Подтверждение личности субъекта: проверка того, что он и есть тот, за кого себя выдаёт
    </term>
    <term name="Авторизация">Принятие решения о предоставлении или запрете доступа к конкретным действиям и ресурсам
    </term>
    <term name="Идентификация">Первичное объявление своей личности без доказательства (заявление «кто я»)</term>
    <term name="MFA">Многофакторная аутентификация: использование двух и более факторов (знание, обладание, биометрия,
        контекст)
    </term>
    <term name="Сеанс">Состояние, связывающее пользователя и сервер после входа (обычно поддерживается куками)</term>
    <term name="Токен доступа">Маркер, предоставляющий ограниченные права доступа к ресурсам в течение заданного
        времени
    </term>
    <term name="OAuth2">Стандарт делегирования доступа, позволяющий приложению запрашивать доступ к ресурсам от имени
        пользователя
    </term>
    <term name="OpenID Connect">Расширение OAuth2 для идентификации пользователя посредством ID Token и стандартных
        протокольных точек
    </term>
    <term name="JWT">JSON Web Token — компактный формат переноса утверждений с подписью/проверкой целостности</term>
    <term name="ID Token">Токен OIDC с утверждениями о пользователе (кто вошёл, когда выдано и т.п.)</term>
    <term name="Access Token">Токен, который предоставляет клиенту доступ к защищённым ресурсам (обычно предъявляется
        серверу ресурсов)
    </term>
    <term name="Refresh Token">Токен для обновления токена доступа без повторной аутентификации пользователя</term>
    <term name="Scope">Область/объём разрешённых действий, запрошенных клиентом и выданных авторизационным сервером
    </term>
    <term name="Claim">Утверждение внутри токена (идентификатор, аудитория, срок действия, роли и т.п.)</term>
    <term name="JWKS">JSON Web Key Set — формат публикации открытых ключей для проверки подписей токенов</term>
    <term name="RBAC">Role-Based Access Control — управление доступом на основе ролей</term>
    <term name="ABAC">Attribute-Based Access Control — управление доступом на основе атрибутов субъекта, объекта и
        контекста
    </term>
    <term name="PBAC">Policy-Based Access Control — управление доступом на основе формализованных политик</term>
    <term name="Argon2">Адаптивный алгоритм хэширования паролей, устойчивый к атакам перебора на современных
        платформах
    </term>
    <term name="PBKDF2">Функция derivation-ключей, применяемая для замедления перебора паролей</term>
    <term name="bcrypt">Адаптивная функция хэширования паролей, усложняющая массовый перебор</term>
    <term name="TLS">Криптографический протокол для защиты трафика (конфиденциальность и целостность)</term>
    <term name="Фишинг">Социальная атака, провоцирующая пользователя выдать секреты под видом доверенного источника
    </term>
    <term name="Поставщик идентичности">Система, выполняющая аутентификацию и выдающую токены/утверждения о
        пользователе
    </term>
    <term name="Федерация идентичности">Доверительная связь между доменами, позволяющая использовать единую учётную
        запись в разных системах
    </term>
    <term name="Время жизни токена">Период, в течение которого токен считается действительным; после истечения требуется
        обновление
    </term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="API">Контракт взаимодействия между клиентом и сервером, описывающий пути, методы, форматы данных</term>
    <term name="Endpoint">Конкретный путь и метод HTTP, представляющие операцию над ресурсом</term>
    <term name="HTTP-методы">Набор глаголов (GET, POST, PUT, PATCH, DELETE), определяющих семантику операции</term>
    <term name="Статус-код">Числовой код результата обработки запроса (например, 200, 201, 404, 500)</term>
    <term name="Query-параметры">Параметры строки запроса для фильтрации, сортировки и пагинации</term>
    <term name="Path-параметры">Переменные сегменты пути, однозначно идентифицирующие ресурс</term>
    <term name="Заголовок">Метаданные HTTP запроса/ответа (Authorization, Content-Type и т.п.)</term>
    <term name="Пагинация">Способ постраничной выдачи коллекций (page/size, limit/offset, cursor)</term>
    <term name="Курсор">Маркер позиции в последовательности, используемый для стабильной пагинации</term>
    <term name="Идемпотентность">Свойство операции давать одинаковый конечный результат при повторных вызовах</term>
    <term name="Data-обёртка">Единая структура ответа с полями data и meta</term>
    <term name="_error">Стандартизованное поле тела ответа для описания ошибок</term>
    <term name="OpenAPI">Спецификация описания API в виде YAML/JSON документа</term>
    <term name="Swagger">Инструменты визуализации и генерации по OpenAPI (Swagger UI, Codegen)</term>
    <term name="Версионирование API">Подход к выпуску несовместимых изменений через отдельные версии (v1, v2)</term>
    <term name="Батч-запрос">Запрос, содержащий несколько операций для пакетной обработки</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Трейс">Полный путь запроса через распределённую систему, состоящий из множества спанов</term>
    <term name="Спан">Отдельная операция внутри трейса с временем начала/окончания, атрибутами и статусом</term>
    <term name="Контекст трассировки">Набор идентификаторов и метаданных (trace_id, span_id), передаваемый между
        сервисами
    </term>
    <term name="OTLP">Стандартный протокол/формат OpenTelemetry для доставки трейсов, метрик и логов</term>
    <term name="Семплинг">Отбор части данных (например, 10% трейсов) для снижения нагрузки и стоимости</term>
    <term name="Метрика">Числовой показатель, отслеживаемый во времени (counter, gauge, histogram, summary)</term>
    <term name="PromQL">Язык запросов Prometheus для анализа метрик</term>
    <term name="Exemplar">Ссылка на конкретный трейс внутри точки метрики (обычно гистограммы) для быстрой корреляции
    </term>
    <term name="Кардинальность метрик">Количество уникальных комбинаций меток; влияет на нагрузку и стоимость хранения
    </term>
    <term name="SLO/SLI/SLA">Целевые уровни качества/показатели и договорённости об уровне сервиса</term>
    <term name="Alertmanager">Компонент экосистемы Prometheus для маршрутизации и дедупликации алертов</term>
    <term name="Grafana">Платформа визуализации, дашбордов и алертов, поддерживающая множество источников данных</term>
    <term name="Jaeger">Система хранения и визуализации распределённых трасс</term>
    <term name="OpenTelemetry">Набор стандартов, SDK и Collector для сбора и экспорта наблюдаемости</term>
    <term name="Collector">Сервис OpenTelemetry для приёма, обработки (фильтрация, семплинг) и экспорта сигналов</term>
    <term name="Golden signals">Базовые сигналы здоровья: латентность, трафик, ошибки, насыщение</term>
    <term name="Runbook">Пошаговая инструкция действий при инциденте и для типовых операций траблшутинга</term>
    <term name="W3C Trace Context">Стандарт заголовков для передачи контекста трассировки: traceparent и baggage</term>
    <term name="Логи">Структурированная или текстовая запись событий, происходящих в системе (запросы, ошибки, служебные
        сообщения). Логи помогают восстановить последовательность действий и контекст инцидента: кто вызвал операцию,
        какие параметры были переданы, что вернулось. Лучшие практики: писать в формате JSON, добавлять trace_id/span_id
        для корреляции с трассами, избегать ПДн и секретов, использовать уровни (debug, info, warn, error) и
        ротацию/ретеншн.
    </term>
    <term name="Профилирование">Методика детального измерения использования ресурсов и времени выполнения внутри
        процесса (CPU, память, аллокации, блокировки, системные вызовы). Позволяет находить горячие точки (hot paths),
        утечки памяти, лишние аллокации и контентьон. Обычно выполняется локально или на staging с профайлерами
        (CPU/Heap/Wall/Block), результат анализируют через flame graph/trace view. Отличается от трейсов тем, что
        измеряет не путь запроса между сервисами, а внутреннюю работу конкретного процесса.
    </term>
    <term name="Prometheus">Система мониторинга и база временных рядов (TSDB) с pull-моделью: сама опрашивает цели по
        эндпойнту /metrics. Поддерживает типы метрик Counter, Gauge, Histogram, Summary и язык запросов PromQL для
        агрегаций, квантилей и алертинга. В экосистему входит Alertmanager для маршрутизации оповещений. Требует
        аккуратной работы с метками, чтобы сдерживать кардинальность и стоимость.
    </term>
    <term name="Семантические соглашения">Стандартизированные имена и наборы атрибутов для сигналов наблюдаемости
        (трейсов, метрик, логов), чтобы разные сервисы описывали события одинаково. В OpenTelemetry это, например,
        единые ключи для HTTP-запросов (http.method, http.route, http.status_code), баз данных (db.system, db.statement)
        и облачной инфраструктуры. Соблюдение соглашений упрощает поиск, корреляцию и построение универсальных дашбордов
        и алертов.
    </term>
    <term name="Latency">Время отклика системы — интервал между началом операции (например, получением запроса) и её
        завершением (отправкой ответа). Измеряется в миллисекундах/секундах. Бывает «end-to-end» (полный путь клиента) и
        «server-side» (только сервер). Для оценки качества используют перцентили (P50, P95, P99), потому что среднее
        скрывает хвосты медленных запросов. Важно фиксировать метод измерения, источник времени и границы (включает ли
        сети, прокси, ретраи).
    </term>
    <term name="Saturation">Насыщение — степень загруженности ресурса (CPU, память, пул подключений, очередь запросов),
        при которой система приближается к пределу пропускной способности. Растущая насыщённость часто ведёт к
        увеличению latency и ошибкам. Отслеживается через метрики использования и очередей (например, длина очереди,
        занятость пула, load average) и пороги алертинга, привязанные к SLO.
    </term>
    <term name="Перцентиль 95 (P95)">Перцентиль 95 (P95) - Значение метрики, ниже которого находится 95% наблюдений за
        период. Для latency это
        «время, которое не превышает 95% запросов», а 5% самых медленных — выше P95. Перцентили устойчивее среднего и
        показывают опыт большинства пользователей. Используются для SLO (например, «P95 latency ≤ 300 мс»). Вычисляются
        по гистограммам/квантильным алгоритмам; важно выбирать адекватные бакеты и окно агрегации.
    </term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Пакетный менеджер">Инструмент для установки, обновления и удаления библиотек, а также управления их
        версиями и зависимостями
    </term>
    <term name="Node.js">Среда выполнения JavaScript вне браузера, основанная на движке V8</term>
    <term name="Пакет">Архивированный модуль кода с метаданными package.json, распространяемый через реестр</term>
    <term name="Регистр npm">Сервис-хранилище пакетов (по умолчанию registry.npmjs.org), из которого npm устанавливает
        зависимости
    </term>
    <term name="Зависимость">Внешний пакет, необходимый для сборки, тестирования или работы приложения</term>
    <term name="Скрипт npm">Именованная команда в секции scripts файла package.json, запускаемая через npm run</term>
    <term name="Семантическое версионирование">Соглашение о версиях формата MAJOR.MINOR.PATCH и правилах их увеличения
    </term>
    <term name="Диапазон версий">Ограничение допустимых версий зависимости (например, ^1.2.3, ~1.2.3, >=1.0.0)</term>
    <term name="Локфайл">Файл package-lock.json, фиксирующий точные версии и дерево зависимостей для воспроизводимых
        установок
    </term>
    <term name="Peer dependency">Зависимость, которую должен установить конечный проект, обеспечивая совместимость
        плагина и хоста
    </term>
    <term name="Кэш npm">Локальное хранилище загруженных пакетов для ускорения последующих установок</term>
    <term name=".npmrc">Файл конфигурации клиента npm, определяющий реестр, политику версий, аутентификацию и другие
        параметры
    </term>
    <term name="npx">Инструмент запуска исполняемых файлов из зависимостей без их глобальной установки (сейчас часть npm
        exec)
    </term>
    <term name="SQL">Декларативный язык запросов к реляционным БД: описывает, какие данные нужны, а не как их получать
    </term>
    <term name="PostgreSQL">Объектно-реляционная СУБД с поддержкой JSONB, массивов, CTE, оконных функций и
        материализованных представлений
    </term>
    <term name="SELECT">Оператор выборки данных из одной или нескольких таблиц</term>
    <term name="INSERT">Оператор добавления новых строк в таблицу</term>
    <term name="UPDATE">Оператор изменения существующих строк таблицы</term>
    <term name="DELETE">Оператор удаления строк из таблицы по условию</term>
    <term name="CREATE">Оператор создания объектов БД (баз, схем, таблиц, индексов, представлений)</term>
    <term name="DROP">Оператор удаления объектов БД (без возврата без бэкапа)</term>
    <term name="WHERE">Условие фильтрации строк в запросах DML (SELECT/UPDATE/DELETE)</term>
    <term name="ORDER BY">Сортировка результата запроса по одному или нескольким столбцам (ASC/DESC)</term>
    <term name="GROUP BY">Группировка строк для агрегирования (SUM/AVG/COUNT и т. п.)</term>
    <term name="JOIN">Соединение строк из двух таблиц по условию соответствия ключей</term>
    <term name="INNER JOIN">Возвращает только совпадающие строки из обеих таблиц</term>
    <term name="LEFT JOIN">Все строки из левой таблицы и совпадающие из правой, иначе NULL</term>
    <term name="RIGHT JOIN">Все строки из правой таблицы и совпадающие из левой, иначе NULL</term>
    <term name="FULL OUTER JOIN">Все строки из обеих таблиц; при отсутствии пары — NULL</term>
    <term name="Подзапрос">Вложенный SELECT, результат которого используется во внешнем запросе</term>
    <term name="Агрегатная функция">Функция, сворачивающая множество строк в одно значение (SUM, AVG, MIN, MAX, COUNT)
    </term>
    <term name="EXPLAIN">Показ плана выполнения запроса, оценка стоимости операций без фактического запуска</term>
    <term name="EXPLAIN ANALYZE">Выполнение запроса с замерами времени и фактической статистикой плана</term>
    <term name="Транзакция">Группа операций как единое целое: либо все фиксируются (COMMIT), либо откатываются
        (ROLLBACK)
    </term>
    <term name="Индекс">Структура данных для ускорения поиска и сортировки по столбцам; ускоряет чтение, замедляет
        запись
    </term>
    <term name="VIEW">Представление: виртуальная таблица, хранящая текст запроса и читающая актуальные данные базовых
        таблиц
    </term>
    <term name="MATERIALIZED VIEW">Материализованное представление: физически сохранённый результат запроса, требующий
        обновления
    </term>
    <term name="REFRESH MATERIALIZED VIEW">Команда пересчёта данных материализованного представления</term>
    <term name="REFRESH MATERIALIZED VIEW CONCURRENTLY">Обновление материализованного представления без блокировки
        чтения (PostgreSQL 9.4+)
    </term>
    <term name="CTE">Common Table Expression: временно именованный результат, объявляемый через WITH и используемый в
        основном запросе
    </term>
    <term name="Оконные функции">Класс функций, считающих значения поверх «окна» строк, связанного с текущей строкой
    </term>
    <term name="OVER">Клаузула, задающая окно для оконной функции</term>
    <term name="PARTITION BY">Разбиение набора строк на группы внутри окна</term>
    <term name="ROW_NUMBER">Оконная функция: последовательная нумерация строк в заданном порядке</term>
    <term name="RANK">Оконная функция ранжирования с пропусками при равных значениях</term>
    <term name="DENSE_RANK">Оконная функция ранжирования без пропусков при равных значениях</term>
    <term name="LAG">Оконная функция доступа к предыдущей строке в рамках окна</term>
    <term name="LEAD">Оконная функция доступа к следующей строке в рамках окна</term>
    <term name="SERIAL">Сокращение для целочисленного столбца с автоинкрементом на базе последовательности</term>
    <term name="Последовательность">Генератор уникальных числовых значений (CREATE SEQUENCE, nextval)</term>
    <term name="PRIMARY KEY">Ограничение уникальности и NOT NULL для идентификации строк таблицы</term>
    <term name="Роль">Пользователь/группа в PostgreSQL, на которую назначаются привилегии доступа</term>
    <term name="Триггер">Процедура, автоматически выполняемая при INSERT/UPDATE/DELETE на таблице</term>
    <term name="JSONB">Двоичный формат хранения JSON в PostgreSQL с возможностью эффективной индексации</term>
    <term name="LIKE">Оператор шаблонного сопоставления строк (%, _), обычно регистрозависимый</term>
    <term name="Регулярное выражение ~">Оператор сопоставления по регулярному выражению; ~ — чувствителен к регистру, ~*
        — нет
    </term>
    <term name="pg_dump">Утилита создания логических бэкапов PostgreSQL</term>
    <term name="psql">Клиентская консоль PostgreSQL для выполнения SQL и восстановления из дампов</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="СУБД">Система управления базами данных: программный комплекс для хранения и доступа к данным</term>
    <term name="Реляционная СУБД (RDBMS)">Класс СУБД с таблицами, схемой и SQL, обеспечивающий ACID-транзакции</term>
    <term name="NoSQL">Семейство нереляционных хранилищ (документные, ключ-значение, графовые и др.)</term>
    <term name="SQL">Язык структурированных запросов для работы с реляционными базами данных</term>
    <term name="Документная БД">Хранилище документов JSON/BSON с гибкой схемой</term>
    <term name="Ключ-значение">Модель хранения, где доступ к данным происходит по уникальному ключу</term>
    <term name="Колонночная БД">База данных, хранящая данные по столбцам, эффективная для аналитики</term>
    <term name="База временных рядов">СУБД, оптимизированная под метрики и события, упорядоченные по времени</term>
    <term name="Графовая БД">Хранилище в виде узлов и ребер для данных с большим числом связей</term>
    <term name="Поисковый движок">Система полнотекстового поиска и агрегирования (Elasticsearch, OpenSearch)</term>
    <term name="Объектное хранилище">Масштабируемое хранилище файлов как объектов с ключом и метаданными (например,
        S3)
    </term>
    <term name="Кэш">Быстрое временное хранилище (обычно в памяти) для ускорения чтения</term>
    <term name="ACID">Свойства транзакций: атомарность, согласованность, изолированность, долговечность</term>
    <term name="CAP-теорема">Компромисс между согласованностью и доступностью при сетевых разделениях</term>
    <term name="Атомарность">Транзакция выполняется целиком или не выполняется вовсе</term>
    <term name="Согласованность">Переход базы из одного корректного состояния в другое</term>
    <term name="Изолированность">Параллельные транзакции не влияют друг на друга</term>
    <term name="Долговечность (Durability)">Результат подтвержденной транзакции сохраняется при сбоях</term>
    <term name="OLTP">Класс нагрузок с короткими транзакциями и высокой конкуренцией на запись</term>
    <term name="OLAP">Аналитические нагрузки с большими объемами данных и сложными агрегациями</term>
    <term name="Хранилище данных (DWH)">Централизованная аналитическая база для отчетности и BI</term>
    <term name="Озеро данных (Data Lake)">Хранилище сырых данных в объектном хранилище</term>
    <term name="Lakehouse">Архитектурный подход, совмещающий Data Lake и DWH</term>
    <term name="Схема данных">Описание структуры таблиц/коллекций, типов и связей</term>
    <term name="Нормализация">Методика проектирования схем, уменьшающая дублирование данных</term>
    <term name="Денормализация">Осознанное дублирование для ускорения чтения и упрощения запросов</term>
    <term name="Первичный ключ">Уникальный идентификатор строки в таблице</term>
    <term name="Внешний ключ">Ссылка на ключ в другой таблице для обеспечения целостности</term>
    <term name="Индекс БД">Структура данных для ускорения поиска по столбцу или набору столбцов</term>
    <term name="Источник истины">Главное хранилище, считающееся единственно верным для критичных данных</term>
    <term name="Репликация">Создание копий данных для отказоустойчивости и масштабирования чтения</term>
    <term name="Лаг репликации">Задержка между записью в основной узел и появлением на реплике</term>
    <term name="Шардинг">Горизонтальное разбиение данных по ключу на несколько узлов</term>
    <term name="ETL/ELT">Процессы переноса данных: извлечение, трансформация, загрузка (или трансформация на стороне
        хранилища)
    </term>
    <term name="RBAC">Модель контроля доступа на основе ролей</term>
    <term name="ABAC">Модель контроля доступа на основе атрибутов</term>
    <term name="TDE">Шифрование данных на уровне хранения (Transparent Data Encryption)</term>
    <term name="KMS">Сервис управления ключами шифрования</term>
    <term name="Eventual consistency">Модель, при которой данные становятся согласованными спустя время</term>
    <term name="Файловая система">Организация хранения и именования файлов на носителях</term>
    <term name="Холодное хранилище">Дешевый, но медленный слой для редко запрашиваемых данных</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Контейнер">Изолированная среда исполнения приложения, созданная из образа и использующая ядро хоста
    </term>
    <term name="Образ">Неизменяемый шаблон файловой системы и метаданных, из которого создаются контейнеры</term>
    <term name="Dockerfile">Файл с инструкциями сборки образа (FROM, COPY, RUN, CMD и др.)</term>
    <term name="Реестр образов">Серверное хранилище образов (например, Docker Hub, GitHub Container Registry)</term>
    <term name="Том (Volume)">Персистентное хранилище данных Docker, живёт независимо от жизненного цикла контейнера
    </term>
    <term name="Сеть Docker">Логическая изолированная сеть, в которой контейнеры могут обнаруживать друг друга по
        имени
    </term>
    <term name="WSL2">Подсистема Windows для Linux второго поколения, предоставляющая полноценное Linux-ядро</term>
    <term name="Healthcheck">Механизм проверки «здоровья» контейнера, по которому оркестратор/Compose может
        реагировать
    </term>
    <term name="Bind mount">Монтирование директории/файла с хоста внутрь контейнера</term>
    <term name="Docker Compose">Инструмент для декларативного описания и запуска многоконтейнерных приложений</term>
    <term name="Профили Compose">Способ включать/выключать наборы сервисов под разные сценарии (dev, ci, prod)</term>
    <term name="Multi-stage build">Подход к сборке образов с несколькими стадиями для уменьшения размера и повышения
        безопасности
    </term>
    <term name="Идентичность окружений">Свойство, при котором приложение запускается одинаково на любых машинах
        благодаря контейнерам
    </term>
    <term name="Индекс">Структура данных, ускоряющая поиск строк в таблице за счёт дополнительного хранения ключей и
        ссылок на строки
    </term>
    <term name="B-Tree">Сбалансированное дерево, индекс по умолчанию в PostgreSQL; поддерживает сравнения и
        упорядочивания
    </term>
    <term name="Hash">Индекс, оптимизированный для операций равенства (=)</term>
    <term name="GIN">Инвертированный индекс для множественных значений (массивы, jsonb, tsvector), эффективен для
        «содержит»
    </term>
    <term name="GiST">Обобщённый индекс для похожести и геоданных (пересечения, ближайшие соседи)</term>
    <term name="BRIN">Компактный индекс по диапазонам страниц; эффективен для больших почти отсортированных данных
    </term>
    <term name="SP-GiST">Индекс для разреженных данных и пространственных разбиений (например, квадродеревья)</term>
    <term name="Селективность">Доля строк, удовлетворяющих условию; высокая селективность означает мало подходящих
        строк
    </term>
    <term name="Кардинальность">Число уникальных значений в столбце; влияет на выбор плана</term>
    <term name="Seq Scan">Последовательное сканирование всей таблицы без индекса</term>
    <term name="Index Scan">Доступ к строкам через индекс по одним или нескольким ключам</term>
    <term name="Bitmap Index Scan">Построение битовой карты подходящих строк по индексу с последующим чтением страниц
    </term>
    <term name="Bitmap Heap Scan">Чтение страниц таблицы по битовой карте, полученной из Bitmap Index Scan</term>
    <term name="Index Only Scan">Чтение только индекса без обращения к таблице, если нужные столбцы покрыты и карта
        видимости актуальна
    </term>
    <term name="Карта видимости">Структура, отмечающая страницы без «мусорных» строк; требуется для Index Only Scan
    </term>
    <term name="VACUUM">Обслуживание таблиц: помечает удалённые версии строк как свободные</term>
    <term name="ANALYZE">Сбор статистики о распределении значений для планировщика</term>
    <term name="REINDEX">Полное перестроение индекса для устранения bloat или ошибок структуры</term>
    <term name="CONCURRENTLY">Режим создания/перестроения индекса без длительных блокировок чтения/записи</term>
    <term name="Частичный индекс">Индекс, созданный по предикату WHERE и покрывающий подмножество строк</term>
    <term name="Индекс по выражению">Индекс, строящийся на результате функции/выражения, а не на «сыром» столбце</term>
    <term name="Покрывающий индекс (INCLUDE)">Индекс с «включёнными» столбцами для поддержки Index Only Scan</term>
    <term name="Инвертированный индекс">Индекс, сопоставляющий «терм → список документов/строк», как в полнотекстовом
        поиске
    </term>
    <term name="Полнотекстовый поиск">Поиск по человеческому тексту с нормализацией, морфологией и ранжированием</term>
    <term name="jsonb">Двоичный формат хранения JSON в PostgreSQL с поддержкой операторов и индексов</term>
    <term name="Bloat">Разбухание таблиц/индексов из-за удалённых/обновлённых строк, повышающее стоимость IO</term>
    <term name="Fillfactor">Параметр, определяющий, сколько места оставлять свободным на странице для будущих
        обновлений
    </term>
    <term name="Селектор префикса (левый префикс)">Часть составного индекса от первого столбца до некоторой позиции;
        влияет на применимость индекса
    </term>
    <term name="Планировщик">Компонент, выбирающий план выполнения запроса на основе статистики и стоимостей</term>
    <term name="Latency">Задержка выполнения операции/запроса</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Agile">Подход к разработке, основанный на инкрементальной поставке, обратной связи и адаптивном
        планировании
    </term>
    <term name="Scrum">Фреймворк Agile с ролями, событиями и артефактами, работающий итерациями (спринтами)</term>
    <term name="Kanban">Фреймворк непрерывного потока с визуализацией и ограничением WIP</term>
    <term name="WIP">Количество одновременно выполняемой работы; ограничение WIP уменьшает переключение контекста</term>
    <term name="Git">Распределённая система контроля версий</term>
    <term name="Git-Flow">Модель ветвления с ветками main, develop, feature, release, hotfix</term>
    <term name="Trunk Based Development">Подход с одной основной веткой и короткими фиче-ветками, быстрым мержем и
        feature-флагами
    </term>
    <term name="Pull Request">Запрос на слияние изменений, используемый для code review</term>
    <term name="Release Candidate">Кандидат на релиз, проходящий финальные проверки перед выпуском</term>
    <term name="Semantic Versioning">Схема версионирования MAJOR.MINOR.PATCH с предрелизными суффиксами (например,
        -rc.1)
    </term>
    <term name="Conventional Commits">Спецификация формата сообщений коммитов для автоматизации релиз-нот и
        версионирования
    </term>
    <term name="Changelog">Журнал изменений продукта между версиями</term>
    <term name="CI/CD">Непрерывная интеграция и деплой: автоматические сборки, тесты и поставка</term>
    <term name="Backlog">Упорядоченный список задач и требований продукта</term>
    <term name="Спринт">Фиксированная итерация разработки в Scrum</term>
    <term name="Ретроспектива">Собрание команды по итогам итерации для улучшения процесса</term>
    <term name="Staging">Среда предпродакшен-проверок, максимально похожая на продакшен</term>
    <term name="Scrum">Фреймворк Agile с фиксированными ролями, событиями и артефактами для итерационной разработки
    </term>
    <term name="Спринт">Фиксированный по времени цикл (обычно 1–2 недели), в конце которого показывается инкремент
        продукта
    </term>
    <term name="Kanban">Подход непрерывного потока с визуализацией работы и ограничением WIP</term>
    <term name="Backlog">Упорядоченный список требований и задач продукта</term>
    <term name="Product Backlog">Бэклог всего продукта, приоритизируемый Product Owner</term>
    <term name="Sprint Backlog">Подмножество Product Backlog, выбранное на спринт с задачами реализации</term>
    <term name="Product Owner">Роль, отвечающая за ценность продукта и приоритизацию бэклога</term>
    <term name="User Story">Краткое описание потребности пользователя и создаваемой ценности</term>
    <term name="Acceptance Criteria">Набор проверяемых условий, определяющих, что история реализована корректно</term>
    <term name="Definition of Ready">Договор команды о признаках готовности элемента к планированию</term>
    <term name="Definition of Done">Договор команды о полноте готовности инкремента (код, тесты, ревью, деплой и т.д.)
    </term>
    <term name="Planning Poker">Командная техника оценки сложности историй с одновременным раскрытием карт</term>
    <term name="Story Points">Относительная единица оценки объёма/сложности работы с учётом неопределённости</term>
    <term name="Velocity">Историческая скорость команды: сумма выполненных story points за спринт</term>
    <term name="Sprint Goal">Фокус спринта, формулирующий измеримый результат/ценность для пользователя</term>
    <term name="Daily Scrum">Ежедневная 15-минутная синхронизация команды по прогрессу к цели спринта</term>
    <term name="Backlog Refinement">Регулярное уточнение верхушки бэклога: критерии приёмки, оценки, риски,
        зависимости
    </term>
    <term name="Sprint Review">Обзор инкремента с демонстрацией стейкхолдерам и сбором обратной связи</term>
    <term name="Sprint Retrospective">Встреча по улучшению процесса с набором конкретных action items</term>
    <term name="WIP">Количество одновременно выполняемой работы; ограничение снижает переключение контекста</term>
    <term name="Replenishment/Commitment">Kanban-встреча по пополнению очереди «Ready» с учётом WIP и SLA</term>
    <term name="Daily Kanban">Короткая ежедневная синхронизация по состоянию потока и блокерам</term>
    <term name="Service Delivery Review">Регулярный обзор метрик потока (cycle time, throughput, aging, CFD)</term>
    <term name="Risk Review">Обзор рисков и вариативности потока с действиями по их снижению</term>
    <term name="Cycle Time">Время выполнения элемента от начала работы до завершения</term>
    <term name="Lead Time">Время от запроса (создания элемента) до его поставки пользователю</term>
    <term name="Throughput">Количество завершённых элементов за единицу времени</term>
    <term name="CFD">Кумулятивная диаграмма потока, показывающая объём работы в каждой колонке доски</term>
    <term name="Aging Chart">График «старения» задач, показывающий, как долго элементы находятся в работе</term>
    <term name="Spike">Кратковременное исследование/прототип для снижения неопределённости перед реализацией</term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="CI">Непрерывная интеграция: автоматическая сборка, анализ и тестирование каждого изменения кода</term>
    <term name="CD">Непрерывная доставка/развёртывание: автоматизация вывода подготовленного артефакта в окружения
        вплоть до продакшена
    </term>
    <term name="GitOps">Подход, при котором желаемое состояние инфраструктуры и приложений хранится в Git и применяется
        автоматически
    </term>
    <term name="Argo CD">Инструмент GitOps для Kubernetes, синхронизирующий кластер с репозиторием манифестов</term>
    <term name="Kubernetes">Платформа оркестрации контейнеров для автоматизации развёртывания, масштабирования и
        управления сервисами
    </term>
    <term name="Docker">Платформа упаковки приложений в контейнеры для воспроизводимого запуска</term>
    <term name="Docker Compose">Инструмент описания и запуска мультиконтейнерных приложений на одной машине</term>
    <term name="Gitea">Лёгкий self-hosted Git-сервер c поддержкой Actions (workflow-ов)</term>
    <term name="Gitea Actions">Система CI в Gitea, совместимая с синтаксисом GitHub Actions</term>
    <term name="Quality Gate">Набор обязательных проверок качества (линтер, тесты, безопасность), без прохождения
        которых релиз невозможен
    </term>
    <term name="Blue-Green">Стратегия релизов с двумя идентичными окружениями и быстрым переключением трафика</term>
    <term name="Canary">Постепенное прокатывание новой версии на малую долю трафика с последующим увеличением</term>
    <term name="OPA Gatekeeper">Политики в Kubernetes для валидации манифестов на основе Open Policy Agent</term>
    <term name="Kyverno">Политики и мутации манифестов для Kubernetes на декларативном YAML</term>
    <term name="OpenTelemetry">Набор стандартов и SDK для трассировок, метрик и логов; основа наблюдаемости</term>
    <term name="SAST">Статический анализ безопасности исходного кода</term>
    <term name="DAST">Динамическое тестирование безопасности приложения «снаружи»</term>
    <term name="Dependency Scan">Проверка зависимостей на известные уязвимости</term>
    <term name="Secret">Чувствительные данные (пароли, ключи), требующие защищённого хранения и передачи</term>
    <term name="Ingress">Компонент Kubernetes для публикации сервисов наружу и маршрутизации трафика</term>
    <term name="Service Mesh">Сетевой слой поверх кластера (Istio/Linkerd) для балансировки, MTLS, rollout-стратегий и
        наблюдаемости
    </term>
    <term name="Workflow">Описанный в YAML сценарий CI/CD, состоящий из джобов и шагов</term>
    <term name="Pull Request">Запрос на слияние изменений, триггерящий автоматические проверки и ревью</term>
    <term name="Helm">Пакетный менеджер для Kubernetes (чарты) с шаблонизацией манифестов</term>
    <term name="Kustomize">Инструмент наложения патчей и оверлеев на базовые манифесты Kubernetes</term>
    <term name="Trunk-Based">Модель разработки с короткими ветками и частыми слияниями в основную ветку</term>
    <term name="Supply Chain Security">Практики защиты цепочки поставки ПО: проверка исходников, зависимостей,
        артефактов и окружений
    </term>
    <term name="Альтернативные протоколы">Сетевые протокольные подходы помимо классического HTTP request-response: WS,
        RPC, GraphQL, WebRTC
    </term>
    <term name="WebSocket">Постоянное двунаправленное соединение поверх HTTP upgrade для обмена сообщениями
        клиент↔сервер
    </term>
    <term name="RPC">Модель удаленного вызова процедур с передачей аргументов и получением результата или потоков</term>
    <term name="JSON-RPC">Легкий текстовый RPC-протокол на JSON (версии 2.0), работает поверх разных транспортов</term>
    <term name="gRPC">Высокопроизводительный RPC-фреймворк поверх HTTP/2 с бинарной сериализацией Protocol Buffers
    </term>
    <term name="Protocol Buffers">IDL и бинарный формат сериализации от Google; компактный, быстрый, эволюционируемый
    </term>
    <term name="IDL">Язык описания интерфейсов и типов (схем) для генерации кода клиентов и серверов</term>
    <term name="GraphQL">Язык запросов и схема типов для гибкого выбора данных клиентом (query/mutation/subscription)
    </term>
    <term name="WebRTC">Стек p2p-связи для аудио/видео/данных между клиентами с шифрованием и низкой задержкой</term>
    <term name="SDP">Session Description Protocol — формат описания параметров медиа-сеанса в WebRTC</term>
    <term name="ICE">Interactive Connectivity Establishment — алгоритм поиска p2p-пути с учетом NAT</term>
    <term name="STUN">Сервис определения публичного адреса/порта клиента за NAT</term>
    <term name="TURN">Ретранслятор трафика, когда p2p недоступно; повышает надежность ценой затрат</term>
    <term name="DataChannel">Канал передачи произвольных двоичных/текстовых данных в WebRTC</term>
    <term name="Unary RPC">Один запрос — один ответ в RPC</term>
    <term name="Streaming RPC">RPC с потоком сообщений (server, client или bidirectional streaming)</term>
    <term name="Схема (Schema)">Формальное описание структуры данных и типов (например, protobuf или GraphQL SDL)</term>
    <term name="Совместимость схем">Правила эволюции контрактов без поломки старых клиентов (backward/forward
        compatibility)
    </term>
    <term name="N+1 проблема">Антипаттерн множественных мелких запросов при обходе графа данных (часто в GraphQL)</term>
    <term name="Handshake">Рукопожатие — начальный обмен сообщениями для установления соединения (например, WS 101)
    </term>
    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="NestJS">Фреймворк для создания серверных приложений на Node.js и TypeScript с модульной архитектурой
    </term>
    <term name="Фреймворк">Набор библиотек и соглашений, ускоряющих разработку за счет готовых паттернов и структур
    </term>
    <term name="Node.js">Среда выполнения JavaScript на стороне сервера</term>
    <term name="TypeScript">Надстройка над JavaScript с системой статической типизации</term>
    <term name="Модульность">Подход к организации кода, при котором функциональность разделена на независимые модули
    </term>
    <term name="Инверсия зависимостей">Принцип, по которому высокоуровневые модули не зависят от низкоуровневых, оба
        зависят от абстракций
    </term>
    <term name="SOLID">Набор принципов проектирования для повышения читабельности и расширяемости кода</term>
    <term name="Декоратор">Специальная аннотация, описывающая метаданные класса или метода и влияющая на его поведение
    </term>
    <term name="Провайдер">Класс или значение, зарегистрированное в DI-контейнере и доступное для внедрения</term>
    <term name="Инжектор зависимостей">Механизм, автоматически создающий и передающий зависимости в классы</term>
    <term name="NestFactory">Фабрика для создания и конфигурирования экземпляра приложения Nest</term>
    <term name="ValidationPipe">Глобальная труба NestJS для валидации и трансформации входных данных</term>
    <term name="DTO">Объект передачи данных, описывающий форму входа и выхода API</term>
    <term name="Exception Filter">Компонент NestJS для перехвата и унификации ошибок</term>
    <term name="Middleware">Прослойка, обрабатывающая запрос до попадания в контроллер</term>
    <term name="Интерцептор">Компонент, перехватывающий вызовы обработчиков для добавления кросс-срезочной логики</term>
    <term name="Trace Id">Идентификатор трассы, помогающий связывать логи и спаны одного запроса</term>
    <term name="ORM">Библиотека сопоставления объектов и записей базы данных</term>
    <term name="Use Case">Операция прикладной логики, решающая понятную задачу предметной области</term>
    <term name="Event-driven architecture">Архитектурный стиль, в котором компоненты взаимодействуют через события
    </term>
    <term name="OpenTelemetry">Набор стандартов и инструментов для метрик, логов и распределённой трассировки</term>
    <term name="TypeORM">Популярная ORM для TypeScript и Node.js</term>
    <term name="PostgreSQL">Реляционная база данных с поддержкой ACID и расширениями</term>
    <term name="MongoDB">Документо-ориентированная база данных</term>
    <term name="Redis">Сверхбыстрое хранилище данных в памяти, часто используется как кэш и брокер сообщений</term>
    <term name="S3">Протокол и сервис объектного хранилища для файлов и бинарных данных</term>
    <term name="Зацепление">Сильная зависимость модулей друг от друга, усложняющая изменения и тестирование</term>
    <term name="Express">Минималистичный веб-фреймворк, используемый NestJS как один из HTTP-адаптеров</term>

    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term>
    <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term>
    <term name="Валидация">Проверка входных данных на соответствие правилам (тип, формат, диапазон)</term>
    <term name="Трансформация">Преобразование входных данных к целевому типу/формату перед обработкой</term>
    <term name="Декоратор">Функция-аннотация, добавляющая метаданные или поведение к классу/свойству/методу</term>
    <term name="Пайп">Компонент NestJS для валидации/преобразования значения до попадания в обработчик</term>
    <term name="DTO">Класс (Data Transfer Object), описывающий контракт входных/выходных данных</term>
    <term name="Swagger">Инструменты и UI для документирования и тестирования API поверх спецификации OpenAPI</term>
    <term name="OpenAPI">Стандарт описания REST API (схемы, пути, параметры, ответы, безопасность)</term>
    <term name="Bearer Token">Схема авторизации, при которой токен передаётся в заголовке Authorization: Bearer
        token
    </term>
    <term name="API Key">Простой ключ доступа к API, передаваемый в заголовке/параметре/cookie</term>
    <term name="Схема безопасности OpenAPI">Описание механизма авторизации в спецификации (http, apiKey, oauth2,
        openIdConnect)
    </term>
    <term name="class-validator">Библиотека для декларативной валидации полей через декораторы</term>
    <term name="class-transformer">Библиотека для преобразования plain-объектов в экземпляры классов и наоборот</term>
    <term name="ValidationPipe">Встроенный пайп NestJS для автоматической валидации и трансформации на основе DTO</term>
    <term name="Guards">Механизм NestJS для проверки авторизации/прав доступа перед выполнением обработчика</term>

    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term> <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term> <term name="S3 API">HTTP-интерфейс объектного хранилища Amazon S3 и совместимых систем</term> <term name="Bucket">Логический контейнер для объектов в S3-совместимых хранилищах</term> <term name="IAM">Модель управления доступом: пользователи, роли, политики</term> <term name="Bucket policy">JSON-политика, задающая права на уровне бакета и префиксов</term> <term name="Lifecycle policy">Правила автоматического перехода/удаления объектов по времени</term> <term name="Presigned URL">Временная подпись запроса, позволяющая доступ без выдачи секретных ключей</term> <term name="Multipart upload">Загрузка объекта частями с возможностью параллелизма и докачки</term> <term name="Erasure coding">Метод распределённого хранения с восстановлением данных при отказах</term> <term name="ETag">Идентификатор версии содержимого; для одночастной загрузки часто совпадает с MD5</term> <term name="CORS">Правила кросс-доменных запросов из браузера к S3/MinIO</term> <term name="SSE (Server-Side Encryption)">Шифрование объектов на стороне хранилища</term> <term name="Content-Type">MIME-тип объекта, влияющий на корректную отдачу и обработку</term>

    <term name="Инструкция">Минимальные команды языка, выполняемые последовательно</term> <term name="Примитив">Значения, не являющиеся объектами и не имеющие методов</term> <term name="In-memory store">Хранилище данных в оперативной памяти для сверхнизких задержек</term> <term name="Stream">Структура Redis для логов событий с потребительскими группами</term> <term name="Pub/Sub">Механизм публикации/подписки сообщений без сохранения истории</term> <term name="Sharding">Разделение данных на части по ключам для горизонтального масштабирования</term> <term name="Redis Cluster">Режим Redis с автоматическим шардингом и редиректами</term> <term name="Sentinel">Компонент Redis для мониторинга, фейловера и обнаружения мастера</term> <term name="Persistence">Механизмы долговечности данных: RDB, AOF и их комбинации</term> <term name="Eviction policy">Политика удаления ключей при нехватке памяти (LRU/LFU/TTL и др.)</term> <term name="MULTI/EXEC">Механизм транзакций в Redis: пакет команд выполняется атомарно</term> <term name="WATCH">Оптимистическая блокировка ключей перед транзакцией</term> <term name="Pipeline">Отправка нескольких команд за один round-trip для повышения пропускной способности</term> <term name="TTL">Время жизни ключа, по истечении которого он удаляется</term> <term name="ACL">Списки контроля доступа, ограничивающие команды/ключи для пользователей</term>

</terms>
