<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Архитектура" id="_Arch">

        <chapter title="Что такое архитектура в программировании">
            <p>
                Под <tooltip term="Архитектура">архитектурой</tooltip> в программировании понимается
                структура и организация системы: то, как её части взаимодействуют между собой,
                как распределяются обязанности между модулями и какие правила определяют их взаимосвязи.
            </p>
            <p>
                Архитектура не ограничивается только схемами и красивыми диаграммами.
                Это набор решений, которые определяют, насколько система будет
                <format style="bold">масштабируемой</format>, <format style="bold">устойчивой к ошибкам</format>
                и <format style="bold">удобной в поддержке</format>.
            </p>
        </chapter>

        <chapter title="Почему архитектура важна">
            <p>
                Правильная архитектура помогает разработчикам решать задачи быстрее и эффективнее,
                а бизнесу — получать устойчивый и предсказуемый результат. Если архитектура продумана плохо,
                изменения становятся дорогими, система работает нестабильно, а новые участники команды
                тратят слишком много времени на понимание кода.
            </p>
            <list>
                <li><format style="bold">Снижение сложности</format> — разделение системы на модули упрощает понимание и доработку.</li>
                <li><format style="bold">Повышение надежности</format> — правильные зависимости уменьшают вероятность ошибок при изменениях.</li>
                <li><format style="bold">Масштабируемость</format> — заранее продуманная структура облегчает рост нагрузки.</li>
                <li><format style="bold">Долгосрочная поддержка</format> — понятные правила облегчают работу новым членам команды.</li>
            </list>
        </chapter>

        <chapter title="Подводные камни плохой архитектуры">
            <warning>
                Если изначально не уделить внимание архитектуре, проект быстро превращается в так называемый
                <tooltip term="Spaghetti code">«спагетти-код»</tooltip>. Такой код трудно тестировать,
                любое изменение ломает неожиданные части системы, а сроки разработки начинают расти лавинообразно.
            </warning>
            <p>
                Часто на старте проекта архитектура откладывается «на потом» ради скорости.
                Но это приводит к техническому долгу, который приходится выплачивать в будущем
                переписываниями и багфиксами.
            </p>
        </chapter>

        <chapter title="Лучшие практики">
            <note>
                Даже в небольших проектах стоит продумывать базовую архитектуру: разделять код на слои
                (например, контроллеры, сервисы, репозитории), использовать четкие соглашения об именовании
                и хранении файлов. Эти простые меры уже сильно повышают качество системы.
            </note>
            <tip>
                Архитектура должна быть не статичной, а эволюционировать вместе с системой.
                Лучше начинать с простой структуры и постепенно улучшать её, чем пытаться сразу построить
                «идеальную» модель, которая всё равно окажется неактуальной через год.
            </tip>
        </chapter>
</topic>