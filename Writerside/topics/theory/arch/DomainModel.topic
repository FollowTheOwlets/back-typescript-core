<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Доменная модель" id="DomainModel">
    
    <chapter title="Зачем нужна доменная модель?">
        <p>
            <format style="bold">Доменная модель</format>
            — это мыслительная конструкция, описывающая
            <tooltip term="Предметная область">предметную область</tooltip>
            , её понятия, правила и ограничения в виде взаимосвязанных объектов и процессов. Её цель — чтобы
            программная система отражала реальные правила бизнеса, а не только структуру данных или технические
            детали.
        </p>
        <list>
            <li>Модель делает явными термины и правила, снижая разрыв между бизнесом и разработкой.</li>
            <li>Модель определяет
                <tooltip term="Инвариант">инварианты</tooltip>
                — то, что «нельзя нарушать никогда».
            </li>
            <li>Модель задаёт границы изменений: где можно расширять поведение, а где менять нельзя.</li>
        </list>
        <note>Думайте о модели как о «языке и грамматике» системы: если термина нет в модели — система не умеет с
            ним работать.
        </note>
    </chapter>

    <chapter title="Базовые понятия доменного анализа">
        <chapter title="Предметная область и границы смысла">
            <p>
                <format style="bold">Предметная область</format>
                — это часть реального мира, проблемы и цели которой решает система. В ней мы выделяем
                <tooltip term="Контекст">контексты</tooltip>
                — области, где термины используются однозначно.
            </p>
            <p>
                <format style="bold">Единый язык (Ubiquitous Language)</format>
                — согласованные определения терминов, которыми одинаково пользуются и разработчики, и эксперты
                домена.
            </p>
            <warning>Если один и тот же термин означает разное в разных частях системы, без явных контекстов вы
                получите скрытые дефекты: требования «вроде понятны», но реализованы по-разному.
            </warning>
        </chapter>

        <chapter title="Модель не равна схеме БД">
            <p>
                <format style="bold">Доменная модель</format>
                описывает правила и поведение. Схема хранения — вторична и может меняться без изменения смысла. Не
                подменяйте модель таблицами: колонки не выражают инварианты и политики.
            </p>
            <tip>Начинайте с понятий, сценариев и ограничений. Хранение и интеграции проектируйте после того, как
                смысл устоялся.
            </tip>
        </chapter>
    </chapter>

    <chapter title="Строительные блоки модели (тактические паттерны)">
        <chapter title="Сущность">
            <p>
                <format style="bold">Сущность</format>
                — объект, чья идентичность важнее текущих свойств. Идентичность постоянна на всём жизненном цикле.
            </p>
            <note>Сущность может менять состояние, но остаётся «той же самой» благодаря устойчивому идентификатору и
                истории.
            </note>
        </chapter>
        
        <chapter title="Значение (Value Object)">
            <p>
                <format style="bold">Значение</format>
                — неизменяемый объект без собственной идентичности, полностью описываемый своими полями (например,
                денежная сумма с валютой). Два значений равны, если равны их поля.
            </p>
            <warning>Если вы добавляете к значению идентификатор и позволяете обновлять его «по месту», вы
                разрушаете преимущество неизменяемости: проверки становятся сложнее, растёт связность.
            </warning>
        </chapter>

        <chapter title="Агрегат и корень агрегата">
            <p>
                <format style="bold">Агрегат</format>
                — когерентный кластер сущностей и значений с общими инвариантами.
                <format style="bold">Корень агрегата</format>
                — единственная точка внешнего доступа и изменение состояния внутри агрегата допустимо только через
                него.
            </p>
            <note>Граница агрегата — граница транзакционной согласованности. Внутри — инварианты выдерживаются
                строго, между агрегатами — через политики согласования и события.
            </note>
            <warning>Слишком крупный агрегат приводит к «всегда большим транзакциям», блокировкам и низкой
                пропускной способности. Слишком мелкий — к «взрыву согласований» и хрупкости процессов.
            </warning>
        </chapter>

        <chapter title="Доменные события">
            <p>
                <format style="bold">Доменное событие</format>
                — произошедший факт в терминах домена («Оплата проведена», «Заказ отменён»). Событие фиксирует
                изменение существенного состояния и служит триггером для реакций других частей модели.
            </p>
            <tip>Формулируйте события в прошедшем времени: так проще понять, что именно уже истинно.</tip>
        </chapter>

        <chapter title="Доменные службы и политики">
            <p>
                <format style="bold">Доменная служба</format>
                — место для поведения, которое неестественно «привинчивать» к одной сущности (например, расчёт
                скидки по набору правил).
                <format style="bold">Политика</format>
                — правило принятия решений внутри домена, независимое от инфраструктуры.
            </p>
        </chapter>
    </chapter>

    <chapter title="Стратегический уровень DDD">
        <chapter title="Ограниченные контексты и карта контекстов">
            <p>
                <format style="bold">Ограниченный контекст</format>
                — область, где
                <tooltip term="Единый язык">единый язык</tooltip>
                применим без двусмысленностей.
                <format style="bold">Карта контекстов</format>
                описывает отношения между контекстами: где один является источником истины, где требуется защита от
                искажения значений, где требуется переводы терминов.
            </p>
            <note>Границы контекстов — организационные и смысловые границы. Они помогают разделить ответственность
                команд и уменьшить когнитивную нагрузку.
            </note>
        </chapter>
        <chapter title="Согласованность между контекстами">
            <p>Строгая согласованность удобна, но дорого стоит при масштабировании. На практике часто применимо
                <format style="bold">согласование со временем</format>
                (eventual consistency) через события и политики повторов.
            </p>
            <warning>Если бизнес-процесс требует «всё либо ничего», держите его внутри одного агрегата или
                контекста. Иначе неизбежны сложные компенсации.
            </warning>
        </chapter>
    </chapter>
    <chapter title="Подходы к разработке вокруг модели">
        <chapter title="DDD — моделирование, от языка к коду">
            <p>
                <format style="bold">Domain-Driven Design (DDD)</format>
                — подход, при котором дизайн системы ведут доменные понятия и правила. Он включает стратегические
                решения (контексты, их отношения) и тактические (сущности, значения, агрегаты, события).
            </p>
            <list>
                <li>Сначала язык и сценарии, потом структуры и границы.</li>
                <li>Инварианты — внутри агрегатов; взаимодействия — через события и политики.</li>
                <li>Эволюция модели — нормальный процесс: пересогласовывайте термины по мере обучения домену.</li>
            </list>
            <warning>Опасность «псевдо-DDD»: красивые слова без явных инвариантов и границ. Признак — модель не
                запрещает неверные состояния.
            </warning>
        </chapter>

        
        <chapter title="TDD — проверяем поведение модели">
            <p>
                <format style="bold">Test-Driven Development (TDD)</format>
                — цикл «красный → зелёный → рефакторинг». Тест формулирует ожидаемое поведение в терминах домена,
                минимальная реализация удовлетворяет тест, затем структура упрощается без изменения поведения.
            </p>
            <list>
                <li>Пишите примеры в терминах домена, а не технических деталей.</li>
                <li>Тестируйте инварианты агрегата: «это невозможно», «это всегда так».</li>
                <li>Фиксируйте контракты событий: что гарантируется после факта.</li>
            </list>
            <code-block lang="text">


Given: Баланс счёта = 100
When: Списать 30
Then: Баланс = 70, событие "СписаниеПроведено", инвариант "Баланс >= 0" сохранён </code-block>
            <warning>Тесты, привязанные к внутренней реализации (частным полям, шагам), хрупки и тормозят эволюцию
                модели. Тестируйте поведение и контракты.
            </warning>
        </chapter>

        
        <chapter title="EDD — событийно-ориентированное проектирование">
            <p>
                <format style="bold">EDD (Event-Driven Design/Development)</format>
                — мышление фактами: система выражается как последовательности значимых событий и реакций на них.
                Сначала выявляются события и причинно-следственные связи, затем — команды, политики и агрегаты,
                которые делают события возможными и законными.
            </p>
            <list>
                <li>События описывают «что уже произошло», команды — «что намерены сделать».</li>
                <li>События помогают разорвать жёсткие связи и согласовывать контексты.</li>
                <li>EDD хорошо выявляет скрытые инварианты и зависимости во времени.</li>
            </list>
            <note>Полезная практика — «разведка событиями»: набросать ленту доменных событий для ключевых сценариев,
                а затем группировать источники событий в агрегаты.
            </note>
            <warning>Опасность «всё делаем событиями»: если каждое мелкое изменение — событие, модель тонет в шуме.
                Выделяйте только бизнес-значимые факты.
            </warning>
        </chapter>
        

    </chapter>

    <chapter title="Как из предметной области получить модель (пошагово)">
        <list>
            <li>
                <format style="bold">Собрать язык</format>
                : выписать термины, их определения и примеры. Уточнить неоднозначности.
            </li>
            <li>
                <format style="bold">Нарисовать сценарии</format>
                : кто что делает, какие результаты важны, какие ситуации запрещены.
            </li>
            <li>
                <format style="bold">Выявить события</format>
                : что фиксируем как «случилось»; какие инварианты должны быть верны до/после.
            </li>
            <li>
                <format style="bold">Сгруппировать в агрегаты</format>
                : чтобы внутри можно было строго поддерживать правила без внешних зависимостей.
            </li>
            <li>
                <format style="bold">Определить контексты</format>
                : где язык стабилен; как контексты взаимодействуют (источник истины, переводы понятий).
            </li>
            <li>
                <format style="bold">Проверить TDD-примерами</format>
                : формализовать кейсы и граничные условия; зафиксировать контракты событий.
            </li>
            <li>
                <format style="bold">Эволюционировать</format>
                : упрощать, переименовывать, разделять контексты по мере обучения домену.
            </li>
        </list>
        <tip>Формулируйте инварианты как запреты и обязательства: «Нельзя списать больше доступного», «Номер должен
            быть уникальным в границах агрегата».
        </tip>
    </chapter>

    <chapter title="Инварианты, время и согласованность">
        <p>Инварианты бывают локальные (внутри агрегата) и глобальные (на уровне контекста/системы). Локальные
            защищаются строго, глобальные согласуются через процессы и события.</p>
        <list>
            <li>
                <format style="bold">Неизменяемость</format>
                значений упрощает разум о прошлом: факты не переписываются, добавляются новые события.
            </li>
            <li>
                <format style="bold">Идемпотентность</format>
                реакций на события снижает риск дубликатов и повторов.
            </li>
            <li>
                <format style="bold">Временные зависимости</format>
                : учитывайте порядок и дедлайны — это часть доменных правил.
            </li>
        </list>
        <warning>Смешивание строгих инвариантов с «догоняющей» согласованностью даёт иллюзию надёжности. Явно
            фиксируйте, что строго, а что может «дойти позже».
        </warning>
    </chapter>

    <chapter title="Команды, запросы и CQRS как мыслительная модель">
        <p>
            <format style="bold">Команды</format>
            меняют состояние (инициируют поведение агрегатов).
            <format style="bold">Запросы</format>
            читают состояние. Разделение ответственности (идея CQRS) упрощает модель: мыслите отдельно о «как
            меняем» и «как читаем».
        </p>
        <tip>Даже если физически чтение и запись реализуются вместе, в голове держите их раздельно: это снижает
            связность и упрощает эволюцию.
        </tip>
    </chapter>

    <chapter title="Анти-паттерны и частые ошибки">
        <list>
            <li>
                <format style="bold">Агрегат-«мешок данных»</format>
                : нет инвариантов, всё редактируется где угодно. Итог — состояние «вроде допустимо», но бизнес
                нарушен.
            </li>
            <li>
                <format style="bold">Микро-агрегаты</format>
                : каждое поле — свой агрегат. Итог — бесконечные согласования и сложность процессов.
            </li>
            <li>
                <format style="bold">Тесты-мокеты внутренностей</format>
                : ломаются при любом рефакторинге, не ловят нарушения правил.
            </li>
            <li>
                <format style="bold">Событийный шум</format>
                : событие на каждый чих. Важные факты тонут в логах.
            </li>
            <li>
                <format style="bold">Неясные границы контекстов</format>
                : один термин означает разное — дефекты на стыках неизбежны.
            </li>
        </list>
        <note>Главный критерий качества модели — способность предотвращать неверные состояния естественным образом,
            а не «исправлять после».
        </note>
    </chapter>

    <chapter title="Мини-эталоны формулировок (для практики мышления)">
    <code-block lang="text">
Правило (инвариант):
— Сумма возврата &lt;= сумме оплаченных позиций
Нарушение невозможно при корректном использовании агрегата &quot;Возврат&quot;.

Событие:
— "ДоговорПодписан": после него "СтатусДоговора = Активен" и "ДатаПодписания установленa".

Команда:
— "ПодписатьДоговор" требует предварительного состояния "Статус = ГотовКПодписанию". </code-block>
    </chapter>
</topic>