<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Микросервисная архитектура" id="MicroArch">

    <p>
        <format style="bold">Определение.</format>
        <tooltip term="Микросервис">Микросервис</tooltip>
        — это автономный процесс, реализующий узкую
        <tooltip term="Сервисная граница">бизнес-возможность</tooltip>
        , владеющий своими данными и взаимодействующий с другими сервисами по
        <tooltip term="Контракт API">явным контрактам</tooltip>
        . Цель — добиться
        <tooltip term="Слабая связность">слабой связности</tooltip>
        между компонентами при высокой
        <tooltip term="Высокая связность">внутренней связности</tooltip>
        каждого сервиса, чтобы команды могли независимо разрабатывать, тестировать, развёртывать и масштабировать части
        системы.
    </p>
    <note> Микросервисы — не про «много маленьких файлов», а про организацию системы и команд вокруг
        <tooltip term="Сервисная граница">чётких границ ответственности</tooltip>
        , контрактов и операционной автономии.
    </note>
    <chapter title="Зачем это нужно: цели и идеи">
        <list>
            <li>
                <format style="bold">Независимые поставки.</format>
                Каждая команда выпускает изменения в своём сервисе без координации «больших релизов».
            </li>
            <li>
                <format style="bold">Изоляция рисков.</format>
                Сбой одного сервиса не «роняет» всю систему при корректной деградации и таймаутах.
            </li>
            <li>
                <format style="bold">Выбор технологий.</format>
                Разные сервисы могут использовать разные стеки, если это оправдано и не ломает операционную
                совместимость.
            </li>
            <li>
                <format style="bold">Масштабирование по компонентам.</format>
                Нагруженные сервисы масштабируются независимо, экономя ресурсы.
            </li>
            <li>
                <format style="bold">Орг-соответствие.</format>
                Архитектура отражает структуру команд (закон Конвея), уменьшая коммуникационные накладные расходы.
            </li>
        </list>
        <tip>Правило мысленного «лифтового питча»: сформулируйте назначение сервиса одной фразой. Если не получается —
            границы сервиса размыты.
        </tip>
    </chapter>
    <chapter title="Ключевые принципы реализации">
        <list>
            <li>
                <format style="bold">Автономия данных.</format>
                Каждый сервис владеет собственной схемой и не делит таблицы с соседями.
            </li>
            <li>
                <format style="bold">Явные контракты.</format>
                Общение только через
                <tooltip term="Контракт API">API</tooltip>
                с
                <tooltip term="Обратная совместимость">обратной совместимостью</tooltip>
                и
                <tooltip term="Версионирование API">версионированием</tooltip>
                .
            </li>
            <li>
                <format style="bold">Синхронное vs асинхронное.</format>
                Синхронные вызовы (HTTP/gRPC) — для «онлайн» путей; асинхронные очереди/шины — для интеграций и фоновых
                реакций.
            </li>
            <li>
                <format style="bold">Идемпотентность.</format>
                Повторная обработка сообщений и запросов не должна менять результат непредсказуемо.
            </li>
            <li>
                <format style="bold">Наблюдаемость по умолчанию.</format>
                Логи, метрики и
                <tooltip term="Трассировка распределенная">трассировки</tooltip>
                — часть функциональных требований.
            </li>
            <li>
                <format style="bold">Операционная готовность.</format>
                Здоровье, readiness/liveness-пробы, сводные
                <tooltip term="SLO">SLO</tooltip>
                и алерты — сразу в первый релиз.
            </li>
            <li>
                <format style="bold">Автоматизация.</format>
                CI/CD, неизменяемые образы, декларативная инфраструктура и миграции данных.
            </li>
            <li>
                <format style="bold">Безопасность по умолчанию.</format>
                <tooltip term="Zero Trust">Недоверие по умолчанию</tooltip>
                ,
                <tooltip term="mTLS">mTLS</tooltip>
                , наименьшие привилегии, безопасное хранение секретов.
            </li>
        </list>
    </chapter>
    <chapter title="Как выбирать границы сервисов"><p>Режьте систему по предметным возможностям и потокам данных, а не
        по техническим слоям (не «контроллеры», «репозитории», а «Платёж», «Каталог», «Доставка»). Учитывайте частоту
        изменений: то, что меняется вместе, должно жить вместе.</p>
        <list>
            <li>У каждого сервиса — собственная база, договорённости на уровне событий/контрактов.</li>
            <li>Минимизируйте «сквозные» транзакции — вместо этого проектируйте локальные инварианты и чёткие реакции на
                факты.
            </li>
            <li>Проверка границ: может ли сервис быть временно недоступен без обрушения пользовательского сценария? Если
                нет — границы выбраны плохо.
            </li>
        </list>
        <warning>Общая база данных для нескольких сервисов приводит к скрытым связям, совместным миграциям и потерям
            автономии.
        </warning>
        <warning>«Тонкий сервис» над общим монолитом создаёт иллюзию микросервисов, но сохраняет старые проблемы.
        </warning>
    </chapter>
    <chapter title="Коммуникации между сервисами"><p>Синхронные вызовы упрощают запрос-ответ, но удлиняют критический
        путь: каждая новая «стыковка» увеличивает P95/таймауты. Асинхронные взаимодействия повышают устойчивость и
        разгружают фронт, но требуют проектирования доставки, повторов и порядка.</p>
        <list>
            <li>
                <format style="bold">Контракты и версии.</format>
                Не ломайте существующих потребителей: вводите <code>/v2</code> как отдельный контракт.
            </li>
            <li>
                <format style="bold">Таймауты и повторы.</format>
                Любая сеть ненадёжна: задавайте конечные таймауты, ограниченные ретраи и
                <tooltip term="Идемпотентность">идемпотентные</tooltip>
                операции.
            </li>
            <li>
                <format style="bold">Корреляция.</format>
                Передавайте
                <tooltip term="Корреляционный идентификатор">Correlation-ID</tooltip>
                сквозь все вызовы.
            </li>
        </list>
        <code-block lang="yaml">
          openapi: 3.0.3
          info:
              title: Orders API
              version: "1.0"
              paths:
                /v1/orders:
                  post:
                    summary: Create order
                    parameters:
                      - in: header
                        name: Idempotency-Key
                        schema:
                        type: string
                        responses:
                          "201":
                            description: created
                          "409":
                            description: duplicate
        </code-block>
        <note>Контракт явно фиксирует заголовок <code>Idempotency-Key</code> для безопасных повторов.</note>
    </chapter>
    <chapter title="Данные и согласованность">
        <p>Глобальных транзакций в распределённых системах лучше избегать: они хрупки и медленны. Проектируйте локальные
            транзакции в пределах сервиса и механизмы уведомления соседей о «свершившихся фактах». Принимайте
            <tooltip term="Согласованность в итоге">согласованность в итоге</tooltip>
            там, где это допустимо бизнесом.
        </p>
        <list>
            <li>Каждое изменение фиксируется локально, а затем доносится до других сервисов сообщением/вебхуком.</li>
            <li>Получатели обязаны уметь безопасно обрабатывать повторы и внепорядковость.</li>
            <li>Критичные инварианты (например, «баланс не уходит в минус») должны сохраняться локально, без внешних
                вызовов.
            </li>
        </list>
        <warning>Двухфазные коммиты и распределённые транзакции часто ломаются под нагрузкой и увеличивают задержки.
        </warning>
        <tip>Используйте детерминированные ключи (например, <code>orderId</code>) и idempotent-вставки/обновления.</tip>
    </chapter>
    <chapter title="Деплой и инфраструктура"><p>Стандартная операционная база: сервисы согласно доменной модели,
        по базе для каждого сервиса и многие другие участники микросервисной инфраструктуры.
        Поставляйте неизменяемые образы и конфигурации
        как код.</p>
        <code-block
                lang="yaml">
# Минимальный пример изоляции: у каждого сервиса своя БД
services:
    users:
        image: example/users:1.0.0
        environment:
            - DB_URL=postgres://users-db/...

    users-db:
        image: postgres:16

    orders:
        image: example/orders:1.0.0
        environment:
            - DB_URL=postgres://orders-db/...

    orders-db:
        image: postgres:16
        </code-block>
        <warning>Чрезмерная «дробность» (десятки микросервисов без реальной необходимости) увеличивает операционные
            затраты и сложность отладки.
        </warning>
        <note>Практичный путь миграции — начать с
            <tooltip term="Модульный монолит">модульного монолита</tooltip>
            , затем выделять действительно зрелые границы в отдельные сервисы.
        </note>
    </chapter>
    <chapter title="Наблюдаемость и эксплуатация">
        <p>Производственная готовность включает три столпа:
            <tooltip term="Логирование">логи</tooltip>
            ,
            <tooltip term="Метрики">метрики</tooltip>
            ,
            <tooltip term="Трассировка распределенная">трассировки</tooltip>
            . Определите целевые
            <tooltip term="SLO">SLO</tooltip>
            , на их основе стройте алерты и бюджет ошибок.
        </p>
        <list>
            <li>Логи: структурированные, с полями запроса/пользователя/корреляции.</li>
            <li>Метрики: латентность, частота ошибок, насыщение ресурсов.</li>
            <li>Трассировки: единый Correlation-ID на весь путь запроса.</li>
        </list>
    </chapter>
    <chapter title="Тестирование и качество">
        <list>
            <li>
                <format style="bold">Юнит-тесты</format>
                для предметной логики внутри сервиса.
            </li>
            <li>
                <format style="bold">Контрактные тесты</format>
                потребителя и поставщика API, чтобы ловить несовместимые изменения.
            </li>
            <li>
                <format style="bold">Интеграционные тесты</format>
                с локальными зависимостями (контейнеры/фейки), чтобы сценарии были воспроизводимыми.
            </li>
            <li>
                <format style="bold">E2E</format>
                — немного и по критическим путям, иначе они станут хрупкими и медленными.
            </li>
        </list>
        <warning>Опора на внешние «живые» окружения в тестах ведёт к нестабильности и ложным падениям.</warning>
    </chapter>
    <chapter title="Безопасность">
        <list>
            <li>
                <format style="bold">Аутентификация и авторизация</format>
                на границе (шлюз) и внутри (межсервисные токены).
            </li>
            <li>
                <format style="bold">Шифрование</format>
                на транспорте (
                <tooltip term="mTLS">mTLS</tooltip>
                ) и в покое.
            </li>
            <li>
                <format style="bold">Секреты</format>
                только в менеджере секретов, с ротацией.
            </li>
            <li>
                <format style="bold">Аудит</format>
                действий и доступов.
            </li>
        </list>
    </chapter>
    <chapter title="Когда стоит и когда нет">
        <list>
            <li>
                <format style="bold">Подходит,</format>
                если много команд, быстрые релизы, высокие требования к масштабированию и изоляции отказов.
            </li>
            <li>
                <format style="bold">Не подходит,</format>
                если домен простой, команда мала, а основные проблемы — в качестве кода и процессах, а не в архитектуре.
            </li>
        </list>
        <warning>Переезд на микросервисы «ради моды» приведёт к росту сложности без выгоды.</warning>
    </chapter>
    <chapter title="Чек-лист внедрения">
        <list>
            <li>Цели и ожидаемые метрики (скорость релизов, P95, надёжность).</li>
            <li>Карта домена и кандидаты на сервисные границы.</li>
            <li>Стандарты контрактов и версионирования.</li>
            <li>Стратегии коммуникаций (где синхронно, где асинхронно).</li>
            <li>Владение данными и правила согласованности.</li>
            <li>Базовая наблюдаемость и пороговые SLO.</li>
            <li>CI/CD, окружения, миграции, откаты.</li>
            <li>Модель безопасности и работа с секретами.</li>
            <li>Runbook и он-колл: кто, как и чем реагирует.</li>
        </list>
    </chapter>
    <chapter title="Мини-пример: идемпотентный запрос">
    <p>Создание заказа должно безопасно переживать повторную отправку
        клиента/ретраи сети. Контракт вводит заголовок <code>Idempotency-Key</code>, по которому сервер распознаёт
        дубликаты.</p>
        <code-block
                lang="http">
POST /v1/orders HTTP/1.1
Host: api.example.com
Idempotency-Key: 3f5c1f90-5a9b-4a6f-9a10-1f0e0b1c7a22
Content-Type: application/json

{
"items": [{"sku": "SKU123", "qty": 2}],
"customerId": "cst_001"
}
</code-block>
        <note>При втором таком же запросе сервер возвращает тот же результат (например, <code>201</code> с тем же <code>orderId</code>
            или <code>409</code> «duplicate» по договорённости).
        </note>
    </chapter>
</topic>