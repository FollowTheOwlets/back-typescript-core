<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Backend" id="_Backend">

    <chapter title="Что такое серверная разработка">
        <p>
            <tooltip term="Серверная разработка">Серверная разработка</tooltip>
            — это проектирование и создание программ, которые работают на стороне сервера, принимают
            <tooltip term="Запрос">запросы</tooltip>
            от клиентов и возвращают
            <tooltip term="Ответ">ответы</tooltip>
            . Сервер управляет данными, бизнес-правилами и интеграциями с внешними системами. Он обеспечивает
            безопасность, масштабируемость, отказоустойчивость и предсказуемое поведение системы.
        </p>
        <list>
            <li>Цель — предоставить надёжный и быстрый доступ к ресурсам и операциям: от простого чтения данных до
                сложных транзакций.
            </li>
            <li>Сервер — «источник истины»: хранит и валидирует состояние, управляет побочными эффектами (отправка
                писем, списание средств, очереди задач).
            </li>
            <li>Ключевая ценность —
                <format style="bold">инварианты домена</format>: правила, которые всегда должны соблюдаться, независимо от нагрузки и ошибок.
            </li>
        </list>
        <note>Думайте о сервере как о «операционной системе домена»: он планирует работу, защищает границы и
            координирует взаимодействие компонентов.
        </note>
    </chapter>

    <chapter title="Какие задачи решает сервер">
        <list>
            <li>
                <format style="bold">Транспорт</format>: принятие соединений, парсинг протокола (HTTP/2, HTTP/3, gRPC, GraphQL-over-HTTP, WebSocket),
                формирование ответов.
            </li>
            <li>
                <format style="bold">Бизнес-логика</format>: правила, валидация, расчёты, агрегирование данных.
            </li>
            <li>
                <format style="bold">Доступ к данным</format>: чтение/запись в базы данных, кэши, файловые и объектные хранилища.
            </li>
            <li>
                <format style="bold">Интеграции</format>: взаимодействие с внешними сервисами (платёжки, почта, сторонние API).
            </li>
            <li>
                <format style="bold">Безопасность</format>: аутентификация, авторизация, шифрование, аудит.
            </li>
            <li>
                <format style="bold">Надёжность</format>: обработка ошибок, ретраи, идемпотентность, очереди, дедупликация.
            </li>
            <li>
                <format style="bold">Масштабирование</format>: горизонтальное и вертикальное, балансировка, разделение нагрузки, очереди и стримы.
            </li>
            <li>
                <format style="bold">Наблюдаемость</format>: логи, метрики, трассировки, алёрты.
            </li>
            <li>
                <format style="bold">Операции</format>: конфигурация, миграции схемы данных, деплой, откаты.
            </li>
        </list>
    </chapter>
    <chapter title="Жизненный цикл запроса">
        <p>Любой протокол сводится к последовательности шагов: принять запрос, проверить, преобразовать, выполнить
            действие, вернуть ответ и записать следы.</p>
        <list>
            <li>
                <format style="bold">Приём</format>: чтение заголовков, тела, ограничение размеров и времени.
            </li>
            <li>
                <format style="bold">Аутентификация</format>: установление личности (токен, ключ, сертификат).
            </li>
            <li>
                <format style="bold">Авторизация</format>: проверка прав на конкретное действие и ресурс.
            </li>
            <li>
                <format style="bold">Валидация</format>: проверка формата и семантики входных данных.
            </li>
            <li>
                <format style="bold">Бизнес-операция</format>: вызов доменных служб, транзакции, взаимодействие с БД и очередями.
            </li>
            <li>
                <format style="bold">Формирование ответа</format>: правильный статус/код ошибки, заголовки, сериализация.
            </li>
            <li>
                <format style="bold">Наблюдаемость</format>: лог, метрики, трассировка с корреляционным ID.
            </li>
        </list>
        <warning>Пропуск аутентификации/авторизации или валидации — частая причина утечек и ошибок данных. Делайте эти
            слои обязательными и повторно используемыми.
        </warning>
    </chapter>
    <chapter title="Состояние: статeless vs stateful">
        <p>
            <tooltip term="Stateless">Stateless</tooltip>
            сервер не хранит сессию между запросами — все данные приходят в каждом запросе.
            <tooltip term="Stateful">Stateful</tooltip>
            сервер хранит часть состояния (сессии, подписки, сокеты).
        </p>
        <list>
            <li>
                <format style="bold">Stateless</format>
                проще масштабировать и балансировать: любой узел может обработать любой запрос.
            </li>
            <li>
                <format style="bold">Stateful</format>
                нужен для длительных соединений, очередей, игр, realtime; требует прилипания сессий или внешнего
                хранилища состояния.
            </li>
        </list>
        <tip>Стремитесь к stateless-ядру и выносите состояние в внешние хранилища (кэш, БД, брокер сообщений).</tip>
    </chapter>
    <chapter title="Модель исполнения: конкурентность и ввод-вывод">
        <p>Серверы в основном связаны с ожиданием ввода-вывода (I/O). Существует два подхода:
            <format style="bold">асинхронный неблокирующий</format>
            (event loop, реактивные потоки) и
            <format style="bold">многопоточный</format>
            (thread-per-request, пул потоков).
        </p>
        <list>
            <li>Асинхронный стиль масштабируется при большом числе параллельных I/O-операций.</li>
            <li>Потоки проще для CPU-связанной логики, но дороже по памяти и переключениям контекста.</li>
        </list>
        <warning>Блокирующие операции в event loop «замораживают» всех клиентов. Выносите тяжёлые задачи в пул
            воркеров/джобы.
        </warning>
    </chapter>
    <chapter title="Данные и хранение"><p>Сервер управляет данными через слой абстракции к хранилищам.</p>
        <list>
            <li>
                <format style="bold">Реляционные БД</format>: строгие схемы, транзакции, JOIN; хороши для критичных инвариантов.
            </li>
            <li>
                <format style="bold">NoSQL</format>: документо- и ключ-значение хранилища для больших объёмов и гибких схем.
            </li>
            <li>
                <format style="bold">Кэш</format>: Redis/Memcached для низкой задержки чтения горячих данных.
            </li>
            <li>
                <format style="bold">Очереди/стримы</format>: брокеры сообщений для асинхронной обработки и интеграций.
            </li>
            <li>
                <format style="bold">Файлы/объекты</format>: блобы в объектных хранилищах, CDN для раздачи.
            </li>
        </list>
        <note>Выбор хранилища диктуется доменом: транзакционность, консистентность, паттерн чтения/записи, объёмы и SLO
            по задержке/доступности.
        </note>
    </chapter>
    <chapter title="Проектирование интерфейсов (API)"><p>API — контракт между сервером и потребителями (веб, мобильные
        клиенты, другие сервисы).</p>
        <list>
            <li>
                <format style="bold">Ясные ресурсы и операции</format>: предсказуемые пути, семантика методов, коды статуса.
            </li>
            <li>
                <format style="bold">Стабильные схемы</format>: версионирование, обратная совместимость, депрекейшн-план.
            </li>
            <li>
                <format style="bold">Ошибки</format>: единый формат, коды, поля <code>code</code>, <code>message</code>, <code>details</code>.
            </li>
            <li>
                <format style="bold">Пагинация/фильтры</format>: limit/offset или курсоры; предсказуемые ответы.
            </li>
        </list>
        <warning>Ломающее изменение без версии приводит к падению клиентов. Используйте версионирование и миграционные
            окна.
        </warning>
    </chapter>
    <chapter title="Безопасность по умолчанию">
        <list>
            <li>
                <format style="bold">Аутентификация</format>: токены, mTLS, ключи; минимальный набор прав по принципу наименьших привилегий.
            </li>
            <li>
                <format style="bold">Авторизация</format>: роли/политики (RBAC/ABAC); проверка на каждом действии.
            </li>
            <li>
                <format style="bold">Валидация</format>: типы, длины, форматы, допустимые диапазоны.
            </li>
            <li>
                <format style="bold">Защита транспорта</format>: HTTPS/TLS, HSTS, современные шифры.
            </li>
            <li>
                <format style="bold">Секреты</format>: хранилища секретов, ротация ключей, минимизация экспозиции.
            </li>
            <li>
                <format style="bold">Входные лимиты</format>: ограничение размеров тела, rate limiting, captcha для публичных форм.
            </li>
            <li>
                <format style="bold">Журналы аудита</format>: кто, что, когда и откуда сделал с чувствительными объектами.
            </li>
        </list>
        <warning>Без чётких границ авторизации сервер превращается в «общий проходной двор». Любой путь с побочным
            эффектом должен проверять права.
        </warning>
    </chapter>
    <chapter title="Надёжность: ошибки, ретраи, идемпотентность"><p>Сбои — норма в распределённых системах. Сервер
        обязан корректно их переживать.</p>
        <list>
            <li>
                <format style="bold">Классификация ошибок</format>: клиентские (4xx) vs серверные (5xx); временные vs постоянные.
            </li>
            <li>
                <format style="bold">Ретраи</format>: экспоненциальная задержка, джиттер; только для идемпотентных или с ключами
                <code>Idempotency-Key</code>.
            </li>
            <li>
                <format style="bold">Компенсации</format>: саги и обратные действия при частичных отказах.
            </li>
            <li>
                <format style="bold">Очереди</format>: повторная обработка, dead-letter очереди, лимиты попыток.
            </li>
        </list>
        <tip>Добавляйте корреляционный идентификатор запроса в логи и ответы, чтобы связывать цепочки событий.</tip>
    </chapter>
    <chapter title="Производительность и масштабирование">
        <list>
            <li>
                <format style="bold">Кэширование</format>: результаты запросов, агрегаты, метаданные; стратегия инвалидации.
            </li>
            <li>
                <format style="bold">Пулы соединений</format>: к БД и внешним сервисам; таймауты и лимиты.
            </li>
            <li>
                <format style="bold">Профилирование</format>: горячие точки CPU/I-O, медленные запросы, индексы.
            </li>
            <li>
                <format style="bold">Горизонтальное масштабирование</format>: несколько экземпляров за балансировщиком.
            </li>
            <li>
                <format style="bold">Разделение нагрузки</format>: очереди, шедулеры, бэкграунд-джобы.
            </li>
        </list>
        <warning>Оптимизация «вслепую» часто вредна. Сначала измеряйте: p50/p95 задержки, throughput, ошибки,
            использование ресурсов.
        </warning>
    </chapter>
    <chapter title="Наблюдаемость: логи, метрики, трассировки"><p>Нельзя управлять тем, чего не видишь.</p>
        <list>
            <li>
                <format style="bold">Логи</format>: структурированные, с уровнями (info/warn/error), кореляционными ID, полями запроса/ответа.
            </li>
            <li>
                <format style="bold">Метрики</format>: счётчики, таймеры, гистограммы (RPS, p95, ошибки, использование памяти/CPU).
            </li>
            <li>
                <format style="bold">Трассировки</format>: распределённые спаны между сервисами, контекст передаётся заголовками.
            </li>
            <li>
                <format style="bold">Алёрты</format>: SLO/SLA, пороги и уведомления, дашборды.
            </li>
        </list>
        <tip>Стандартизируйте формат логов и именование метрик — это сэкономит часы на расследованиях.</tip>
    </chapter>
    <chapter title="Конфигурация и миграции">
        <list>
            <li>
                <format style="bold">Конфиги из окружения</format>: без хардкода; валидация при старте.
            </li>
            <li>
                <format style="bold">Миграции БД</format>: версионирование схемы, идемпотентные апдейты, откаты.
            </li>
            <li>
                <format style="bold">Фичефлаги</format>: поэтапный rollout, A/B-тесты, тёмные релизы.
            </li>
        </list>
        <warning>Секреты в коде/репозитории — риск компрометации. Используйте менеджеры секретов.</warning>
    </chapter>
    <chapter title="Тестирование и качество">
        <list>
            <li>
                <format style="bold">Юнит-тесты</format>: проверяют чистые функции/правила домена.
            </li>
            <li>
                <format style="bold">Интеграционные</format>: взаимодействие слоёв, БД, очереди.
            </li>
            <li>
                <format style="bold">E2E</format>: полный путь запроса; контракты с внешними API (consumer-driven contracts).
            </li>
            <li>
                <format style="bold">Нагрузочные</format>: производительность и деградации под давлением.
            </li>
            <li>
                <format style="bold">Безопасность</format>: статический анализ, fuzzing, негативные сценарии.
            </li>
        </list>
        <note>Автотесты — часть «страховки» при рефакторинге и релизах. Покрывайте критические пути и инварианты в
            первую очередь.
        </note>
    </chapter>
    <chapter title="Организация кода без привязки к фреймворку">
        <p>Структура следует от домена и потоков данных. Модули
        должны быть слабо связаны и иметь чёткие интерфейсы.</p>
        <tip>Держите доменную логику чистой от инфраструктуры. Внедряйте зависимости через интерфейсы (порты/адаптеры),
            чтобы код было легко тестировать и менять окружение.
        </tip>
        <warning>Смешивание юзкейсов с HTTP-деталями, SQL и форматом ответа делает код хрупким. Разделяйте уровни
            ответственности.
        </warning>
    </chapter>

    <chapter title="Краткий чек-лист начинающего бэкенд-разработчика">
        <list>
            <li>Понимай жизненный цикл запроса и расставляй обязательные «рамки»: аутентификация → авторизация →
                валидация → бизнес-операция → ответ → следы.
            </li>
            <li>Проектируй API как контракт: стабильность, ошибки, версия, пагинация.</li>
            <li>Думай о данных: транзакции, индексы, миграции, резервные копии.</li>
            <li>Закладывай надёжность: ретраи, идемпотентность, очереди, таймауты, лимиты.</li>
            <li>Масштабируй осознанно: измеряй, кэшируй, разделяй нагрузку.</li>
            <li>Делай систему наблюдаемой: логи, метрики, трассировки и алёрты.</li>
            <li>Автоматизируй тесты и деплой; береги секреты.</li>
        </list>
    </chapter>
</topic>