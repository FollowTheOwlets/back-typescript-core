<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="JavaScript" id="_JavaScript">

    <chapter title="В двух словах: что такое JavaScript">
        <p>
            <format style="bold">JavaScript</format> — это динамический язык программирования, созданный для работы с вебом и выросший до универсального инструмента. Сегодня его часто запускают на сервере в среде <tooltip term="Node.js">Node.js</tooltip>, где он обрабатывает запросы, работает с базами данных и файлами, строит API и фоновые задачи.
        </p>
        <p>
            Если говорить совсем просто: JavaScript — это «швейцарский нож» разработчика. Он гибкий, понятный и позволяет быстро получить результат — именно поэтому мы начнём наш путь в бэкенде с него.
        </p>
    </chapter>

    <chapter title="Ключевые особенности простым языком">
        <list>
            <li>
                <p>
                    <format style="bold">Простая стартовая кривая</format>: чтобы вывести текст или прочитать переменную окружения — достаточно нескольких строк. Никаких сложных сборок.
                </p>
            </li>
            <li>
                <p>
                    <format style="bold">Динамическая типизация</format>: переменная может хранить разные типы данных в разное время. Это ускоряет старт и прототипирование.
                </p>
                <note>
                    На продакшене чаще выбирают <tooltip term="TypeScript">TypeScript</tooltip> — надстройку с типами. Но основы одинаковы, поэтому начинать с чистого JS — нормально.
                </note>
            </li>
            <li>
                <p>
                    <format style="bold">Функции — «граждане первого класса»</format>: их можно передавать как значения, хранить в переменных и возвращать из других функций. Это упрощает построение модульного и выразительного кода.
                </p>
            </li>
            <li>
                <p>
                    <format style="bold">Однопоточность и событийный цикл</format>: код выполняется в одном потоке, а операции ввода-вывода — асинхронно, через <tooltip term="Событийный цикл">событийный цикл</tooltip>. Это хорошо масштабируется под сетевые задачи.
                </p>
            </li>
            <li>
                <p>
                    <format style="bold">Асинхронность</format> «из коробки»: <code>Promise</code> и <code>async/await</code> делают асинхронный код понятным и линейным на вид.
                </p>
            </li>
        </list>
    </chapter>

    <chapter title="Где используется JavaScript в бэкенде">
        <list>
            <li>
                <p>
                    <format style="bold">Серверные приложения и API</format>: REST и GraphQL сервисы, микросервисы, вебхуки — всё это удобно писать на <tooltip term="Node.js">Node.js</tooltip>.
                </p>
            </li>
            <li>
                <p>
                    <format style="bold">CLI-утилиты и автоматизация</format>: скрипты для миграций БД, генерации кода, сборки и деплоя.
                </p>
            </li>
            <li>
                <p>
                    <format style="bold">Фоновые задачи</format>: планировщики, обработчики очередей, интеграции с внешними системами.
                </p>
            </li>
        </list>
        <tip>
            Одна экосистема для сервера и вспомогательных инструментов снижает когнитивную нагрузку: один менеджер пакетов, один стиль кода, общие библиотеки.
        </tip>
    </chapter>

    <chapter title="Мини-демо: как выглядит код на JavaScript">
        <p>
            Ниже — три строки типичного серверного JS: чтение аргумента, дефолтное значение и аккуратный вывод. Мы не поднимаем сервер — просто демонстрируем синтаксис и удобство языка.
        </p>
        <code-block lang="javascript">
const nameArg = process.argv[2] ?? 'world';
console.log(`Hello, ${nameArg}!`);
// Пример запуска: node index.js Alex
// Вывод: Hello, Alex!
    </code-block>
        <note>
            Обратите внимание на оператор <code>??</code> («нулевое слияние»): он берёт правую часть, только если слева <code>null</code> или <code>undefined</code>. Это удобный способ задавать значения по умолчанию.
        </note>
    </chapter>

    <chapter title="Как JS исполняется на сервере (на пальцах)">
        <p>
            JavaScript реализует стандарт <tooltip term="ECMAScript">ECMAScript</tooltip>. Конкретная программа запускается движком (например, <tooltip term="V8">V8</tooltip> в Node.js), который читает ваш код, оптимизирует и исполняет его.
        </p>
        <p>
            Когда вы делаете «медленную» операцию вроде запроса к базе, <format style="bold">движок не блокируется</format>: задача уходит в систему ввода-вывода, а ваш код продолжает обслуживать другие запросы. Когда операция завершается, <tooltip term="Событийный цикл">цикл событий</tooltip> ставит коллбек обратно в очередь и выполняет его. Поэтому JS так хорошо подходит для сетевых сервисов.
        </p>
    </chapter>

    <chapter title="Лучшие практики для старта">
        <list>
            <li>
                <p>
                    <format style="bold">Используйте LTS-версию Node.js</format> и фиксируйте её в проекте (через <tooltip term="nvm">nvm</tooltip> или <code>.nvmrc</code>).
                </p>
            </li>
            <li>
                <p>
                    <format style="bold">Храните конфигурацию в окружении</format>: порты, ключи, URL — через <code>process.env</code>, а не хардкодом.
                </p>
            </li>
            <li>
                <p>
                    <format style="bold">Пишите неблокирующий код</format>: избегайте синхронных файловых операций в горячих путях (<code>fs.readFileSync</code> и т.п.), используйте асинхронные версии и <code>await</code>.
                </p>
            </li>
        </list>
        <warning>
            Браузерные API вроде <code>window</code>, <code>document</code>, <code>alert</code> недоступны в Node.js. На сервере используйте встроенные модули (<code>node:fs</code>, <code>node:http</code>) и пакеты из экосистемы npm.
        </warning>
    </chapter>

    <chapter title="Итог: почему JS — хороший первый шаг в бэкенд">
        <p>
            Низкий порог входа, мощная экосистема и удобная асинхронность делают JavaScript отличной отправной точкой для серверной разработки. Дальше мы напишем первую программу, запустим её в Node.js и шаг за шагом превратим в полезный сервис.
        </p>
    </chapter>
</topic>